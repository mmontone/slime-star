This is ansicl, produced by makeinfo version 6.7 from temp.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* ANSI Common Lisp: (ansicl).    Draft ANSI Common Lisp standard (dpANS3R).
END-INFO-DIR-ENTRY


File: ansicl,  Node: F,  Next: G,  Prev: E,  Up: Glossary

F
=

false n.
     the symbol ‘nil’, used to represent the failure of a predicate
     test.

fbound [ˈefˌba\.und] adj. 
     (of a function name) bound in the function namespace.  (The names
     of macros and special operators are fbound, but the nature and type
     of the object which is their value is implementation-dependent.
     Further, defining a setf expander F does not cause the setf
     function ‘(setf F)’ to become defined; as such, if there is a such
     a definition of a setf expander F, the function ‘(setf F)’ can be
     fbound if and only if, by design or coincidence, a function binding
     for ‘(setf F)’ has been independently established.)  See the
     functions *note fboundp:: and ‘symbol-function’.

feature n.
     1.  an aspect or attribute of Common Lisp, of the implementation,
     or of the environment.  2.  a symbol that names a featureSee *note
     Section 24.1.2 (Features): Features.  “The :ansi-cl feature is
     present in all conforming implementations.”

feature expression n.
     A boolean combination of features used by the ‘#+’ and ‘#-’ reader
     macros in order to direct conditional reading of expressions by the
     Lisp reader.  See *note Section 24.1.2.1 (Feature Expressions):
     FeatureExpressions.

features list n.
     the list that is the value of ‘*features*’.

file n.
     a named entry in a file system, having an implementation-defined
     nature.

file compiler n.
     any compiler which compiles source code contained in a file,
     producing a compiled file as output.  The ‘compile-file’ function
     is the only interface to such a compiler provided by Common Lisp,
     but there might be other, implementation-defined mechanisms for
     invoking the file compiler.

file position n. (in a stream)
     a non-negative integer that represents a position in the stream.
     Not all streams are able to represent the notion of file position;
     in the description of any operator which manipulates file
     positions, the behavior for streams that don’t have this notion
     must be explicitly stated.  For binary streams, the file position
     represents the number of preceding bytes in the stream.  For
     character streams, the constraint is more relaxed: file positions
     must increase monotonically, the amount of the increase between
     file positions corresponding to any two successive characters in
     the stream is implementation-dependent.

file position designator n. (in a stream)
     a designator for a file position in that stream; that is, the
     symbol :start (denoting ‘0’, the first file position in that
     stream), the symbol :end (denoting the last file position in that
     stream; i.e., the position following the last element of the
     stream), or a file position (denoting itself).

file stream n.
     an object of type ‘file-stream’.

file system n.
     a facility which permits aggregations of data to be stored in named
     files on some medium that is external to the Lisp image and that
     therefore persists from session to session.

filename n.
     a handle, not necessarily ever directly represented as an object,
     that can be used to refer to a file in a file system.  Pathnames
     and namestrings are two kinds of objects that substitute for
     filenames in Common Lisp.

fill pointer n. (of a vector)
     an integer associated with a vector that represents the index above
     which no elements are active.  (A fill pointer is a non-negative
     integer no larger than the total number of elements in the vector.
     Not all vectors have fill pointers.)

finite adj. (of a type)
     having a finite number of elements.  “The type specifier ‘(integer
     0 5)’ denotes a finite type, but the type specifiers ‘integer’ and
     ‘(integer 0)’ do not.”

fixnum n. 
     an integer of type ‘fixnum’.

float n.
     an object of type ‘float’.

for-value adj. (of a reference to a binding)
     being a reference that readsthe value of the binding.

form n.
     1.  any object meant to be evaluated.  2.  a symbol, a compound
     form, or a self-evaluating object.  3.  (for an operator, as in
     “«operator» form”) a compound form having that operator as its
     first element.  “A ‘quote’ form is a constant form.”

formal argument n. Trad. 
     a parameter.

formal parameter n. Trad. 
     a parameter.

format v.t. (a format control and format arguments)
     to perform output as if by ‘format’, using the format string and
     format arguments.

format argument n.
     an object which is used as data by functions such as ‘format’ which
     interpret format controls.

format control n.
     a format string, or a function that obeys the argument conventions
     for a function returned by the ‘formatter’ macro.  See *note
     Section 22.2.1.3 (Compiling Format Strings):
     CompilingFormatStrings.

format directive n.
     1.  a sequence of characters in a format string which is introduced
     by a tilde, and which is specially interpreted by code which
     processes format strings to mean that some special operation should
     be performed, possibly involving data supplied by the format
     arguments that accompanied the format string.  See the function
     *note format::.  “In ‘"~D base 10 = ~8R"’, the character sequences
     ‘‘~D’’ and ‘‘~8R’’ are format directives.” 2.  the conceptual
     category of all format directiveswhich use the same dispatch
     character.  “Both ‘"~3d"’ and ‘"~3,'0D"’ are valid uses of the
     ‘‘~D’’ format directive.”

format string n.
     a string which can contain both ordinary text and format
     directives, and which is used in conjunction with format arguments
     to describe how text output should be formatted by certain
     functions, such as ‘format’.

free declaration n.
     a declaration that is not a bound declaration.  See *note
     declare::.

fresh adj. 
     1.  (of an object yielded by a function) having been
     newly-allocated by that function.  (The caller of a function that
     returns a fresh object may freely modify the object without fear
     that such modification will compromise the future correct behavior
     of that function.)  2.  (of a binding for a name) newly-allocated;
     not shared with other bindings for that name.

freshline n.
     a conceptual operation on a stream, implemented by the function
     ‘fresh-line’ and by the format directive ‘~&’, which advances the
     display position to the beginning of the next line (as if a newline
     had been typed, or the function ‘terpri’ had been called) unless
     the stream is already known to be positioned at the beginning of a
     line.  Unlike newline, freshline is not a character.

funbound [ˈefunba\.und] n. (of a function name)
     not fbound.

function n.

     1.  an object representing code, which can be called with zero or
     more arguments, and which produces zero or more values.  2.  an
     object of type ‘function’.

function block name n. (of a function name)
     The symbol that would be used as the name of an implicit block
     which surrounds the body of a function having that function name.
     If the function name is a symbol, its function block name is the
     function name itself.  If the function name is a list whose car is
     setf and whose cadr is a symbol, its function block name is the
     symbol that is the cadr of the function name.  An implementation
     which supports additional kinds of function names must specify for
     each how the corresponding function block name is computed.

function cell n. Trad. (of a symbol)
     The place which holds the definition of the global function
     binding, if any, named by that symbol, and which is accessed by
     ‘symbol-function’.  See *note cell: glos-cell.

function designator 
     n.  a designator for a function; that is, an object that denotes a
     function and that is one of: a symbol (denoting the function named
     by that symbol in the global environment), or a function (denoting
     itself).  The consequences are undefined if a symbol is used as a
     function designator but it does not have a global definition as a
     function, or it has a global definition as a macro or a special
     form.  See also *note extended function designator: glos-extended
     function designator.

function form n.
     a form that is a list and that has a first element which is the
     name of a function to be called on arguments which are the result
     of evaluating subsequent elements of the function form.

function name n. 
     1.  (in an environment) A symbol or a list ‘(setf symbol)’ that is
     the name of a function in that environment.  2.  A symbol or a list
     ‘(setf symbol)’.

functional evaluation n. 
     the process of extracting a functional value from a function name
     or a lambda expression.  The evaluator performs functional
     evaluation implicitly when it encounters a function name or a
     lambda expression in the car of a compound form, or explicitly when
     it encounters a ‘function’ special form.  Neither a use of a symbol
     as a function designator nor a use of the function
     ‘symbol-function’ to extract the functional value of a symbol is
     considered a functional evaluation.

functional value n. 
     1.  (of a function name N in an environment E) The value of the
     binding named N in the function namespace for environment E; that
     is, the contents of the function cell named N in environment E. 2.
     (of an fbound symbol S) the contents of the symbol’s function cell;
     that is, the value of the binding named S in the function namespace
     of the global environment.  (A name that is a macro name in the
     global environment or is a special operator might or might not be
     fbound.  But if S is such a name and is fbound, the specific nature
     of its functional value is implementation-dependent; in particular,
     it might or might not be a function.)

further compilation n. 
     implementation-dependent compilation beyond minimal compilation.
     Further compilation is permitted to take place at run time.  “Block
     compilation and generation of machine-specific instructions are
     examples of further compilation.”


File: ansicl,  Node: G,  Next: H,  Prev: F,  Up: Glossary

G
=

general adj. (of an array)
     having element type ‘t’, and consequently able to have any object
     as an element.

generalized boolean 
     n.   an object used as a truth value, where the symbol ‘nil’ 
     represents false and all other objects represent true.  See *note
     boolean: glos-boolean.

generalized instance n. (of a class)
     an object the class of which is either that class itself, or some
     subclass of that class.  (Because of the correspondence between
     types and classes, the term “generalized instance of X” implies
     “object of type X” and in cases where X is a class (or class name)
     the reverse is also true.  The former terminology emphasizes the
     view of X as a class while the latter emphasizes the view of X as a
     type specifier.)

generalized reference n.
     a reference to a location storing an object as if to a variable.
     (Such a reference can be either to read or write the location.)
     See *note Section 5.1 (Generalized Reference): Generalized
     Reference.  See also place.

generalized synonym stream n. (with a synonym stream symbol)
     1.  (to a stream) a synonym stream to the stream, or a composite
     stream which has as a target a generalized synonym stream to the
     stream.  2.  (to a symbol) a synonym stream to the symbol, or a
     composite stream which has as a target a generalized synonym stream
     to the symbol.

generic function n.
     a function whose behavior depends on the classes or identities of
     the arguments supplied to it and whose parts include, among other
     things, a set of methods, a lambda list, and a method combination
     type.

generic function lambda list n.
     A lambda list that is used to describe data flow into a generic
     function.  See *note Section 3.4.2 (Generic Function Lambda Lists):
     Generic Function Lambda Lists.

gensym n. Trad. 
     an uninterned symbol.  See the function *note gensym::.

global declaration n. 
     a form that makes certain kinds of information about code globally
     available; that is, a ‘proclaim’ form or a ‘declaim’ form.

global environment n. 
     that part of an environment that contains bindings with indefinite
     scope and indefinite extent.

global variable n.
     a dynamic variable or a constant variable.

glyph n. 
     a visual representation.  “Graphic characters have associated
     glyphs.”

go v. 
     to transfer control to a go point.  See the special operator *note
     go::.

go point
     one of possibly several exit points that are established by
     ‘tagbody’ (or other abstractions, such as ‘prog’, which are built
     from ‘tagbody’).

go tag n. 
     the symbol or integer that, within the lexical scope of a ‘tagbody’
     form, names an exit point established by that ‘tagbody’ form.

graphic adj. (of a character)
     being a “printing” or “displayable” character that has a standard
     visual representation as a single glyph, such as ‘A’ or ‘*’ or ‘=’.
     Space is defined to be graphic.  Of the standard characters, all
     but newline are graphic.  See *note non-graphic: glos-non-graphic.


File: ansicl,  Node: H,  Next: I,  Prev: G,  Up: Glossary

H
=

handle v. (of a condition being signaled)
     to perform a non-local transfer of control, terminating the ongoing
     signaling of the condition.

handler n. 

     a condition handler.

hash table n. 
     an object of type ‘hash-table’, which provides a mapping from keys
     to values.

home package n. (of a symbol)
     the package, if any, which is contents of the package cell of the
     symbol, and which dictates how the Lisp printer prints the symbol
     when it is not accessible in the current package.  (Symbols which
     have ‘nil’ in their package cell are said to have no home package,
     and also to be apparently uninterned.)


File: ansicl,  Node: I,  Next: K,  Prev: H,  Up: Glossary

I
=

I/O customization variable n.
     one of the stream variables in the next figure, or some other
     (implementation-defined) stream variable that is defined by the
     implementation to be an I/O customization variable.

     *debug-io*         *error-io*          query-io*
     *standard-input*   *standard-output*   *trace-output*

     Figure 26.2: Standardized I/O Customization Variables

identical adj. 
     the same under ‘eq’.

identifier n. 
     1.  a symbol used to identify or to distinguish names.  2.  a
     string used the same way.

immutable adj.
     not subject to change, either because no operator is provided which
     is capable of effecting such change or because some constraint
     exists which prohibits the use of an operator that might otherwise
     be capable of effecting such a change.  Except as explicitly
     indicated otherwise, implementations are not required to detect
     attempts to modify immutable objects or cells; the consequences of
     attempting to make such modification are undefined.  “Numbers are
     immutable.”

implementation n. 
     a system, mechanism, or body of code that implements the semantics
     of Common Lisp.

implementation limit n. 
     a restriction imposed by an implementation.

implementation-defined adj. 
     implementation-dependent, but required by this specification to be
     defined by each conforming implementation and to be documented by
     the corresponding implementor.

implementation-dependent adj. 
     describing a behavior or aspect of Common Lisp which has been
     deliberately left unspecified, that might be defined in some
     conforming implementations but not in others, and whose details may
     differ between implementations.  A conforming implementation is
     encouraged (but not required) to document its treatment of each
     item in this specification which is marked
     implementation-dependent, although in some cases such documentation
     might simply identify the item as “undefined.”

implementation-independent adj. 
     used to identify or emphasize a behavior or aspect of Common
     Lisp which does not vary between conforming implementations.

implicit block n. 
     a block introduced by a macro form rather than by an explicit
     ‘block’ form.

implicit compilation n. 
     compilation performed during evaluation.

implicit progn n. 
     an ordered set of adjacent forms appearing in another form, and
     defined by their context in that form to be executed as if within a
     ‘progn’.

implicit tagbody n. 
     an ordered set of adjacent forms and/or tags appearing in another
     form, and defined by their context in that form to be executed as
     if within a ‘tagbody’.

import v.t. (a symbol into a package)
     to make the symbol be present in the package.

improper list 
     n.   a list which is not a proper list: a circular list or a dotted
     list.

inaccessible adj. 
     not accessible.

indefinite extent 
     n.   an extent whose duration is unlimited.  “Most Common Lisp
     objects have indefinite extent.”

indefinite scope n. 
     scope that is unlimited.

indicator n. 
     a property indicator.

indirect instance n. (of a class C
     an object of class Cwhere C“An integer is an indirect instance of
     the class ‘number’.”

inherit v.t. 
     1.  to receive or acquire a quality, trait, or characteristic; to
     gain access to a feature defined elsewhere.  2.  (a class) to
     acquire the structure and behavior defined by a superclass.  3.  (a
     package) to make symbols exported by another package accessible by
     using ‘use-package’.

initial pprint dispatch table n.
     the value of ‘*print-pprint-dispatch*’ at the time the Lisp image
     is started.

initial readtable n.
     the value of ‘*readtable*’ at the time the Lisp image is started.

initialization argument list n. 
     a property list of initialization argument names and values used in
     the protocol for initializing and reinitializing instances of
     classes.  See *note Section 7.1 (Object Creation and
     Initialization): Object Creation and Initialization.

initialization form n. 
     a form used to supply the initial value for a slot or variable.
     “The initialization form for a slot in a ‘defclass’ form is
     introduced by the keyword :initform.”

input adj. (of a stream)
     supporting input operations (i.e., being a “data source”).  An
     input stream might also be an output stream, in which case it is
     sometimes called a bidirectional stream.  See the function *note
     input-stream-p::.

instance n. 
     1.  a direct instance.  2.  a generalized instance.  3.  an
     indirect instance.

integer n. 
     an object of type ‘integer’, which represents a mathematical
     integer.

interactive stream n. 
     a stream on which it makes sense to perform interactive querying.
     See *note Section 21.1.1.1.3 (Interactive Streams):
     InteractiveStreams.

intern v.t. 
     1.  (a string in a package) to look up the string in the package,
     returning either a symbol with that name which was already
     accessible in the package or a newly created internal symbol of the
     package with that name.  2.  Idiom. generally, to observe a
     protocol whereby objects which are equivalent or have equivalent
     names under some predicate defined by the protocol are mapped to a
     single canonical object.

internal symbol n. (of a package)
     a symbol which is accessible in the package, but which is not an
     external symbol of the package.

internal time n.
     time, represented as an integer number of internal time units.
     Absolute internal time is measured as an offset from an arbitrarily
     chosen, implementation-dependent base.  See *note Section 25.1.4.3
     (Internal Time): InternalTime.

internal time unit n. 
     a unit of time equal to 1/n of a second, for some
     implementation-defined integer value of n.  See the variable *note
     internal-time-units-per-second::.

interned adj. Trad. 
     1.  (of a symbol) accessibleany package.  2.  (of a symbol in a
     specific package) present in that package.

interpreted function n. 
     a function that is not a compiled function.  (It is possible for
     there to be a conforming implementation which has no interpreted
     functions, but a conforming program must not assume that all
     functions are compiled functions.)

interpreted implementation n.
     an implementation that uses an execution strategy for interpreted
     functions that does not involve a one-time semantic analysis
     pre-pass, and instead uses “lazy” (and sometimes repetitious)
     semantic analysis of forms as they are encountered during
     execution.

interval designator n. (of type T)
     an ordered pair of objects that describe a subtype of T by
     delimiting an interval on the real number line.  See *note Section
     12.1.6 (Interval Designators): Interval Designators.

invalid n., adj.
     1.  n.  a possible constituent trait of a character which if
     present signifies that the character cannot ever appear in a token
     except under the control of a single escape character.  For
     details, see *note Section 2.1.4.1 (Constituent Characters):
     ConstituentChars.  2.  adj. (of a character) being a character that
     has syntax type constituent in the current readtable and that has
     the constituent trait invalidSee *note Figure 2.8:
     ConstituentTraitsOfStdChars.

iteration form n.
     a compound form whose operator is named in the next figure, or a
     compound form that has an implementation-defined operator and that
     is defined by the implementation to be an iteration form.

     do               do-external-symbols   dotimes
     do*              do-symbols            loop
     do-all-symbols   dolist

     Figure 26.3: Standardized Iteration Forms

iteration variable n.
     a variable V, the binding for which was created by an explicit use
     of V in an iteration form.


File: ansicl,  Node: K,  Next: L,  Prev: I,  Up: Glossary

K
=

key n. 
     an object used for selection during retrieval.  See *note
     association list: glos-association list, property list, and hash
     table.  Also, see *note Section 17.1 (Sequence Concepts): Sequence
     Concepts.

keyword n. 
     1.  a symbol the home package of which is the ‘KEYWORD’ package.
     2.  any symbol, usually but not necessarily in the ‘KEYWORD’
     package, that is used as an identifying marker in keyword-style
     argument passing.  See *note lambda (Symbol)::.  3.  Idiom. a
     lambda list keyword.

keyword parameter n.
     A parameter for which a corresponding keyword argument is optional.
     (There is no such thing as a required keyword argument.)  If the
     argument is not supplied, a default value is used.  See also *note
     supplied-p parameter: glos-supplied-p parameter.

keyword/value pair n. 
     two successive elements (a keyword and a value, respectively) of a
     property list.


File: ansicl,  Node: L,  Next: M,  Prev: K,  Up: Glossary

L
=

lambda combination n. Trad. 
     a lambda form.

lambda expression n. 
     a list which can be used in place of a function name in certain
     contexts to denote a function by directly describing its behavior
     rather than indirectly by referring to the name of an established
     function; its name derives from the fact that its first element is
     the symbol ‘lambda’.  See *note lambda (Symbol)::.

lambda form n. 
     a form that is a list and that has a first element which is a
     lambda expression representing a function to be called on arguments
     which are the result of evaluating subsequent elements of the
     lambda form.

lambda list n. 
     a list that specifies a set of parameters (sometimes called lambda
     variables) and a protocol for receiving values for those
     parameters; that is, an ordinary lambda list, an extended lambda
     list, or a modified lambda list.

lambda list keyword n. 
     a symbol whose name begins with ampersand and that is specially
     recognized in a lambda list.  Note that no standardized lambda list
     keyword is in the ‘KEYWORD’ package.

lambda variable n. 
     a formal parameter, used to emphasize the variable’s relation to
     the lambda list that established it.

leaf n. 
     1.  an atom in a tree2.  a terminal node of a tree

leap seconds n.
     additional one-second intervals of time that are occasionally
     inserted into the true calendar by official timekeepers as a
     correction similar to “leap years.” All Common Lisp time
     representations ignore leap seconds; every day is assumed to be
     exactly 86400 seconds long.

left-parenthesis n.
     the standard character “‘(’”, that is variously called “left
     parenthesis” or “open parenthesis” See *note Figure 2.5:
     StdCharsThree.

length n. (of a sequence)
     the number of elements in the sequence.  (Note that if the sequence
     is a vector with a fill pointer, its length is the same as the fill
     pointer even though the total allocated size of the vector might be
     larger.)

lexical binding n. 
     a binding in a lexical environment.

lexical closure n. 
     a function that, when invoked on arguments, executes the body of a
     lambda expression in the lexical environment that was captured at
     the time of the creation of the lexical closure, augmented by
     bindings of the function’s parameters to the corresponding
     arguments.

lexical environment n. 
     that part of the environment that contains bindings whose names
     have lexical scope.  A lexical environment contains, among other
     things: ordinary bindings of variable names to values, lexically
     established bindings of function names to functions, macros, symbol
     macros, blocks, tags, and local declarations (see *note declare::).

lexical scope n. 
     scope that is limited to a spatial or textual region within the
     establishing form.  “The names of parameters to a function normally
     are lexically scoped.”

lexical variable n. 
     a variable the binding for which is in the lexical environment.

Lisp image n.
     a running instantiation of a Common Lisp implementation.  A Lisp
     image is characterized by a single address space in which any
     object can directly refer to any another in conformance with this
     specification, and by a single, common, global environment.
     (External operating systems sometimes call this a “core image,”
     “fork,” “incarnation,” “job,” or “process.” Note however, that the
     issue of a “process” in such an operating system is technically
     orthogonal to the issue of a Lisp image being defined here.
     Depending on the operating system, a single “process” might have
     multiple Lisp images, and multiple “processes” might reside in a
     single Lisp image.  Hence, it is the idea of a fully shared address
     space for direct reference among all objects which is the defining
     characteristic.  Note, too, that two “processes” which have a
     communication area that permits the sharing of some but not all
     objects are considered to be distinct Lisp images.)

Lisp printer n. Trad. 
     the procedure that prints the character representation of an object
     onto a stream.  (This procedure is implemented by the function
     ‘write’.)

Lisp read-eval-print loop n. Trad. 
     an endless loop that readsevaluates it, and prints (i.e., writesIn
     many implementations, the default mode of interaction with Common
     Lisp during program development is through such a loop.

Lisp reader n. Trad. 
     the procedure that parses character representations of objects from
     a stream, producing objects.  (This procedure is implemented by the
     function ‘read’.)

list n. 
     1.  a chain of conses in which the car of each cons is an element
     of the list, and the cdr of each cons is either the next link in
     the chain or a terminating atom.  See also *note proper list:
     glos-proper list, dotted list, or circular list.  2.  the type that
     is the union of ‘null’ and ‘cons’.

list designator n.
     a designator for a list of objects; that is, an object that denotes
     a list and that is one of: a non-nil atom (denoting a singleton
     list whose element is that non-nil atom) or a proper list (denoting
     itself).

list structure n. (of a list)
     the set of conses that make up the list.  Note that while the
     car[1b] component of each such cons is part of the list structure,
     the objects that are elements of the list (i.e., the objects that
     are the carsin the list) are not themselves part of its list
     structure, even if they are conses, except in the (circularcase
     where the list actually contains one of its tails as an element.
     (The list structure of a list is sometimes redundantly referred to
     as its “top-level list structure” in order to emphasize that any
     conses that are elements of the list are not involved.)

literal adj. (of an object)
     referenced directly in a program rather than being computed by the
     program; that is, appearing as data in a ‘quote’ form, or, if the
     object is a self-evaluating object, appearing as unquoted data.
     “In the form ‘(cons "one" '("two"))’, the expressions ‘"one"’,
     ‘("two")’, and ‘"two"’ are literal objects.”

load v.t. (a file)
     to cause the code contained in the file to be executed.  See the
     function *note load::.

load time n.
     the duration of time that the loader is loading compiled code.

load time value n. 
     an object referred to in code by a ‘load-time-value’ form.  The
     value of such a form is some specific object which can only be
     computed in the run-time environment.  In the case of file
     compilation, the value is computed once as part of the process of
     loading the compiled file, and not again.  See the special operator
     *note load-time-value::.

loader n.
     a facility that is part of Lisp and that loads a file.  See the
     function *note load::.

local declaration n. 
     an expression which may appear only in specially designated
     positions of certain forms, and which provides information about
     the code contained within the containing form; that is, a declare
     expression.

local precedence order n. (of a class)
     a list consisting of the class followed by its direct superclasses
     in the order mentioned in the defining form for the class.

local slot n. (of a class)
     a slot accessible in only one instance, namely the instance in
     which the slot is allocated.

logical block n.
     a conceptual grouping of related output used by the pretty printer.
     See the macro *note pprint-logical-block:: and *note Section
     22.2.1.1 (Dynamic Control of the Arrangement of Output):
     DynamicControlofOutput.

logical host n.
     an object of implementation-dependent nature that is used as the
     representation of a “host” in a logical pathname, and that has an
     associated set of translation rules for converting logical
     pathnames belonging to that host into physical pathnames.  See
     *note Section 19.3 (Logical Pathnames): Logical Pathnames.

logical host designator n.
     a designator for a logical host; that is, an object that denotes a
     logical host and that is one of: a string (denoting the logical
     host that it names), or a logical host (denoting itself).  (Note
     that because the representation of a logical host is
     implementation-dependent, it is possible that an implementation
     might represent a logical host as the string that names it.)

logical pathname n. 
     an object of type ‘logical-pathname’.

long float n. 
     an object of type ‘long-float’.

loop keyword n. Trad.
     a symbol that is a specially recognized part of the syntax of an
     extended ‘loop’ form.  Such symbols are recognized by their name
     (using ‘string=’), not by their identity; as such, they may be in
     any package.  A loop keyword is not a keyword.

lowercase adj. (of a character)
     being among standard characters corresponding to the small letters
     ‘a’ through ‘z’, or being some other implementation-defined
     character that is defined by the implementation to be lowercase.
     See *note Section 13.1.4.3 (Characters With Case):
     CharactersWithCase.


File: ansicl,  Node: M,  Next: N,  Prev: L,  Up: Glossary

M
=

macro n. 
     1.  a macro form 2.  a macro function.  3.  a macro name.

macro character n. 
     a character which, when encountered by the Lisp reader in its main
     dispatch loop, introduces a reader macro(Macro characters have
     nothing to do with macros.)

macro expansion n. 
     1.  the process of translating a macro form into another form.  2.
     the form resulting from this process.

macro form n. 
     a form that stands for another form (e.g., for the purposes of
     abstraction, information hiding, or syntactic convenience); that
     is, either a compound form whose first element is a macro name, or
     a form that is a symbol that names a symbol macro.

macro function n. 
     a function of two arguments, a form and an environment, that
     implements macro expansion by producing a form to be evaluated in
     place of the original argument form.

macro lambda list n.
     an extended lambda list used in forms that establish macro
     definitions, such as ‘defmacro’ and ‘macrolet’.  See *note Section
     3.4.4 (Macro Lambda Lists): Macro Lambda Lists.

macro name n. 
     a name for which ‘macro-function’ returns true and which when used
     as the first element of a compound form identifies that form as a
     macro form.

macroexpand hook n.
     the function that is the value of ‘*macroexpand-hook*’.

mapping n. 
     1.  a type of iteration in which a function is successively applied
     to objects taken from corresponding entries in collections such as
     sequences or hash tables.  2.  Math. a relation between two sets in
     which each element of the first set (the “domain”) is assigned one
     element of the second set (the “range”).

metaclass n. 
     1.  a class whose instances are classes.  2.  (of an object) the
     class of the class of the object.

Metaobject Protocol n.
     one of many possible descriptions of how a conforming
     implementation might implement various aspects of the object
     system.  This description is beyond the scope of this document, and
     no conforming implementation is required to adhere to it except as
     noted explicitly in this specification.  Nevertheless, its
     existence helps to establish normative practice, and implementors
     with no reason to diverge from it are encouraged to consider making
     their implementation adhere to it where possible.  It is described
     in detail in ‘The Art of the Metaobject Protocol’.

method n. 
     an object that is part of a generic function and which provides
     information about how that generic function should behave when its
     arguments are objects of certain classes or with certain
     identities.

method combination n. 
     1.  generally, the composition of a set of methods to produce an
     effective method for a generic function.  2.  an object of type
     ‘method-combination’, which represents the details of how the
     method combinationspecific generic functions is to be performed.

method-defining form n. 
     a form that defines a method for a generic function, whether
     explicitly or implicitly.  See *note Section 7.6.1 (Introduction to
     Generic Functions): Introduction to Generic Functions.

method-defining operator n.
     an operator corresponding to a method-defining form.  See *note
     Figure 7.1: StdMethDefOps.

minimal compilation n.
     actions the compiler must take at compile time.  See *note Section
     3.2.2 (Compilation Semantics): Compilation Semantics.

modified lambda list 
     n.   a list resembling an ordinary lambda list in form and purpose,
     but which deviates in syntax or functionality from the definition
     of an ordinary lambda list.  See *note ordinary lambda list:
     glos-ordinary lambda list.  “‘deftype’ uses a modified lambda
     list.”

most recent adj.
     innermost; that is, having been established (and not yet
     disestablished) more recently than any other of its kind.

multiple escape n., adj.
     1.  n. the syntax type of a character that is used in pairs to
     indicate that the enclosed characters are to be treated as
     alphabeticwith their case preserved.  For details, see *note
     Section 2.1.4.5 (Multiple Escape Characters): MultipleEscapeChar.
     2.  adj. (of a character) having the multiple escape syntax type.
     3.  n. a multiple escape(In the standard readtable, vertical-bar is
     a multiple escape character.)

multiple values n. 
     1.  more than one value.  “The function ‘truncate’ returns multiple
     values.” 2.  a variable number of values, possibly including zero
     or one.  “The function ‘values’ returns multiple values.” 3.  a
     fixed number of values other than one.  “The macro
     ‘multiple-value-bind’ is among the few operators in Common
     Lisp which can detect and manipulate multiple values.”


File: ansicl,  Node: N,  Next: O,  Prev: M,  Up: Glossary

N
=

name n., v.t. 
     1.  n. an identifier by which an object, a binding, or an exit
     point is referred to by association using a binding.  2.  v.t. to
     give a name to.  3.  n. (of an object having a name component) the
     object which is that component.  “The string which is a symbol’s
     name is returned by ‘symbol-name’.” 4.  n. (of a pathname) a.  the
     name component, returned by ‘pathname-name’.  b.  the entire
     namestring, returned by ‘namestring’.  5.  n. (of a character) a
     string that names the character and that has length greater than
     one.  (All non-graphic characters are required to have names unless
     they have some implementation-defined attribute which is not null.
     Whether or not other characters have names is
     implementation-dependent.)

named constant n. 
     a variable that is defined by Common Lisp, by the implementation,
     or by user code (see the macro *note defconstant::) to always yield
     the same value when evaluated.  “The value of a named constant may
     not be changed by assignment or by binding.”

namespace n. 
     1.  bindings whose denotations are restricted to a particular kind.
     “The bindings of names to tags is the tag namespace.” 2.  any
     mapping whose domain is a set of names.  “A package defines a
     namespace.”

namestring n. 
     a string that represents a filename using either the standardized
     notation for naming logical pathnames described in *note Section
     19.3.1 (Syntax of Logical Pathname Namestrings): Syntax of Logical
     Pathname Namestrings, or some implementation-defined notation for
     naming a physical pathname.

newline n.
     the standard character <Newline>, notated for the Lisp reader as
     ‘#\Newline’.

next method n. 
     the next method to be invoked with respect to a given method for a
     particular set of arguments or argument classes.  See *note Section
     7.6.6.1.3 (Applying method combination to the sorted list of
     applicable methods): ApplyMethCombToSortedMethods.

nickname n. (of a package)
     one of possibly several names that can be used to refer to the
     package but that is not the primary name of the package.

nil 
     n.   the object that is at once the symbol named ‘"NIL"’ in the
     ‘COMMON-LISP’ package, the empty list, the boolean (or generalized
     boolean) representing false, and the name of the empty type.

non-atomic adj. 
     being other than an atom; i.e., being a cons.

non-constant variable n.
     a variable that is not a constant variable.

non-correctable adj. (of an error)
     not intentionally correctable.  (Because of the dynamic nature of
     restarts, it is neither possible nor generally useful to completely
     prohibit an error from being correctable.  This term is used in
     order to express an intent that no special effort should be made by
     code signaling an error to make that error correctable; however,
     there is no actual requirement on conforming programs or conforming
     implementations imposed by this term.)

non-empty adj.
     having at least one element.

non-generic function n. 
     a function that is not a generic function.

non-graphic 
     adj. (of a character) not graphic.  See *note Section 13.1.4.1
     (Graphic Characters): GraphicChars.

non-list n., adj. 
     other than a list; i.e., a non-nil atom.

non-local exit n. 
     a transfer of control (and sometimes values) to an exit point for
     reasons other than a normal return.  “The operators ‘go’, ‘throw’,
     and ‘return-from’ cause a non-local exit.”

non-nil n., adj. 
     not ‘nil’.  Technically, any object which is not ‘nil’ can be
     referred to as true, but that would tend to imply a unique view of
     the object as a generalized boolean.  Referring to such an object
     as non-nil avoids this implication.

non-null lexical environment n. 
     a lexical environment that has additional information not present
     in the global environment, such as one or more bindings.

non-simple adj.
     not simple.

non-terminating adj. (of a macro character)
     being such that it is treated as a constituent character when it
     appears in the middle of an extended token.  See *note Section 2.2
     (Reader Algorithm): Reader Algorithm.

non-top-level form n. 
     a form that, by virtue of its position as a subform of another
     form, is not a top level form.  See *note Section 3.2.3.1
     (Processing of Top Level Forms): TopLevelForms.

normal return n. 
     the natural transfer of control and values which occurs after the
     complete execution of a form.

normalized adj., ANSI, IEEE (of a float)
     conforming to the description of “normalized” as described by ‘IEEE
     Standard for Binary Floating-Point Arithmetic’.  See *note
     denormalized: glos-denormalized.

null adj., n. 
     1.  adj.   a.  (of a list) having no elements: empty.  See *note
     empty list: glos-empty list.  b.  (of a string) having a length of
     zero.  (It is common, both within this document and in observed
     spoken behavior, to refer to an empty string by an apparent
     definite reference, as in “the null string” even though no attempt
     is made to intern“a null string” is technically more correct, but
     is generally considered awkward by most Lisp programmers.  As such,
     the phrase “the null string” should be treated as an indefinite
     reference in all cases except for anaphoric references.)  c.  (of
     an implementation-defined attribute of a character) An object to
     which the value of that attribute defaults if no specific value was
     requested.  2.  n. an object of type ‘null’ (the only such object
     being ‘nil’).

null lexical environment n. 
     the lexical environment which has no bindings.

number n.
     an object of type ‘number’.

numeric adj. (of a character)
     being one of the standard characters ‘0’ through 9, or being some
     other graphic character defined by the implementation to be
     numeric.


File: ansicl,  Node: O,  Next: P,  Prev: N,  Up: Glossary

O
=

object n. 
     1.  any Lisp datum.  “The function ‘cons’ creates an object which
     refers to two other objects.” 2.  (immediately following the name
     of a type) an object which is of that type, used to emphasize that
     the object is not just a name for an object of that type but really
     an element of the type in cases where objects of that type (such as
     ‘function’ or ‘class’) are commonly referred to by name.  “The
     function ‘symbol-function’ takes a function name and returns a
     function object.”

object-traversing adj. 
     operating in succession on components of an object.  “The operators
     ‘mapcar’, ‘maphash’, ‘with-package-iterator’ and ‘count’ perform
     object-traversing operations.”

open adj., v.t. (a file)
     1.  v.t. to create and return a stream to the file.  2.  adj. (of a
     stream) having been opened

operator n. 
     1.  a function, macro, or special operator.  2.  a symbol that
     names such a function, macro, or special operator.  3.  (in a
     ‘function’ special form) the cadr of the ‘function’ special form,
     which might be either an operator4.  (of a compound form) the car
     of the compound form, which might be either an operatoror a lambda
     expression, and which is never ‘(setf symbol)’.

optimize quality n. 
     one of several aspects of a program that might be optimizable by
     certain compilers.  Since optimizing one such quality might
     conflict with optimizing another, relative priorities for qualities
     can be established in an ‘optimize’ declaration.  The standardized
     optimize qualities are ‘compilation-speed’ (speed of the
     compilation process), ‘debug’ (ease of debugging), ‘safety’
     (run-time error checking), ‘space’ (both code size and run-time
     space), and ‘speed’ (of the object code).  Implementations may
     define additional optimize qualities.

optional parameter n.
     A parameter for which a corresponding positional argument is
     optional.  If the argument is not supplied, a default value is
     used.  See also *note supplied-p parameter: glos-supplied-p
     parameter.

ordinary function n. 
     a function that is not a generic function.

ordinary lambda list 
     n.   the kind of lambda list used by lambda.  See *note modified
     lambda list: glos-modified lambda list. and extended lambda list.
     “‘defun’ uses an ordinary lambda list.”

otherwise inaccessible part n. (of an object, O
     an object, OOotherwise inaccessible part of itself.)

output adj. (of a stream)
     supporting output operations (i.e., being a “data sink”).  An
     output stream might also be an input stream, in which case it is
     sometimes called a bidirectional stream.  See the function *note
     output-stream-p::.


File: ansicl,  Node: P,  Next: Q,  Prev: O,  Up: Glossary

P
=

package n. 
     an object of type ‘package’.

package cell n. Trad. (of a symbol)
     The place in a symbol that holds one of possibly several packages
     in which the symbol is interned, called the home package, or which
     holds ‘nil’ if no such package exists or is known.  See the
     function *note symbol-package::.

package designator n.
     a designator for a package; that is, an object that denotes a
     package and that is one of: a string designator (denoting the
     package that has the string that it designates as its name or as
     one of its nicknames), or a package (denoting itself).

package marker n. 
     a character which is used in the textual notation for a symbol to
     separate the package name from the symbol name, and which is colon
     in the standard readtable.  See *note Section 2.1 (Character
     Syntax): Character Syntax.

package prefix n. 
     a notation preceding the name of a symbol in text that is processed
     by the Lisp reader, which uses a package name followed by one or
     more package markers, and which indicates that the symbol is looked
     up in the indicated package.

package registry n.
     A mapping of names to package objects.  It is possible for there to
     be a package object which is not in this mapping; such a package is
     called an unregistered package.  Operators such as ‘find-package’
     consult this mapping in order to find a package from its name.
     Operators such as ‘do-all-symbols’, ‘find-all-symbols’, and
     ‘list-all-packages’ operate only on packages that exist in the
     package registry.

pairwise adv. (of an adjective on a set)
     applying individually to all possible pairings of elements of the
     set.  “The types A, B, and C are pairwise disjoint if A and B are
     disjoint, B and C are disjoint, and A and C are disjoint.”

parallel 
     adj. Trad. (of binding or assignment) done in the style of ‘psetq’,
     ‘let’, or ‘do’; that is, first evaluating all of the forms that
     produce values, and only then assigning or binding the variables
     (or places).  Note that this does not imply traditional
     computational “parallelism” since the forms that produce values are
     evaluated sequentially.  See *note sequential: glos-sequential.

parameter n. 
     1.  (of a function) a variable in the definition of a function
     which takes on the value of a corresponding argument (or of a list
     of corresponding arguments) to that function when it is called, or
     which in some cases is given a default value because there is no
     corresponding argument.  2.  (of a format directive) an object
     received as data flow by a format directive due to a prefix
     notation within the format string at the format directive’s point
     of use.  See *note Section 22.3 (Formatted Output): Formatted
     Output.  “In ‘"~3,'0D"’, the number ‘3’ and the character ‘#\0’ are
     parameters to the ‘~D’ format directive.”

parameter specializer n. 
     1.  (of a method) an expression which constrains the method to be
     applicable only to argument sequences in which the corresponding
     argument matches the parameter specializer.  2.  a class, or a list
     ‘(eql object)’.

parameter specializer name n. 
     1.  (of a method definition) an expression used in code to name a
     parameter specializer.  See *note Section 7.6.2 (Introduction to
     Methods): Introduction to Methods.  2.  a class, a symbol naming a
     class, or a list ‘(eql form)’.

pathname n. 
     an object of type ‘pathname’, which is a structured representation
     of the name of a file.  A pathname has six components: a “host,” a
     “device,” a “directory,” a “name,” a “type,” and a “version.”

pathname designator n.
     a designator for a pathname; that is, an object that denotes a
     pathname and that is one of: a pathname namestring (denoting the
     corresponding pathname), a stream associated with a file (denoting
     the pathname used to open the file; this may be, but is not
     required to be, the actual name of the file), or a pathname
     (denoting itself).  See *note Section 21.1.1.1.2 (Open and Closed
     Streams): File Operations on Open and Closed Streams.

physical pathname n.
     a pathname that is not a logical pathname.

place n. 
     1.  a form which is suitable for use as a generalized reference.
     2.  the conceptual location referred to by such a place

plist [ˈpēˌlist] n. 
     a property list.

portable adj. (of code)
     required to produce equivalent results and observable side effects
     in all conforming implementations.

potential copy n. (of an object O
     an object Oby Oto Oresembles a copy of Onecessary to satisfy the
     constraints.

potential number n. 
     A textual notation that might be parsed by the Lisp reader in some
     conforming implementation as a number but is not required to be
     parsed as a number.  No object is a potential number—either an
     object is a number or it is not.  See *note Section 2.3.1.1
     (Potential Numbers as Tokens): PotentialNumbersAsTokens.

pprint dispatch table n. 
     an object that can be the value of ‘*print-pprint-dispatch*’ and
     hence can control how objects are printed when ‘*print-pretty*’ is
     true.  See *note Section 22.2.1.4 (Pretty Print Dispatch Tables):
     PPrintDispatchTables.

predicate n. 
     a function that returns a generalized boolean as its first value.

present n.
     1.  (of a feature in a Lisp image) a state of being that is in
     effect if and only if the symbol naming the feature is an element
     of the features list.  2.  (of a symbol in a package) being
     accessible in that package directly, rather than being inherited
     from another package.

pretty print v.t. (an object)
     to invoke the pretty printer on the object.

pretty printer n. 
     the procedure that prints the character representation of an object
     onto a stream when the value of ‘*print-pretty*’ is true, and that
     uses layout techniques (e.g., indentation) that tend to highlight
     the structure of the object in a way that makes it easier for human
     readers to parse visually.  See the variable *note
     *print-pprint-dispatch*:: and *note Section 22.2 (The Lisp Pretty
     Printer): The Lisp Pretty Printer.

pretty printing stream n. 
     a stream that does pretty printing.  Such streams are created by
     the function ‘pprint-logical-block’ as a link between the output
     stream and the logical block.

primary method n. 
     a member of one of two sets of methods (the set of auxiliary
     methods is the other) that form an exhaustive partition of the set
     of methods on the method’s generic function.  How these sets are
     determined is dependent on the method combination type; see *note
     Section 7.6.2 (Introduction to Methods): Introduction to Methods.

primary value n. (of values resulting from the
     evaluation of a form) the first value, if any, or else ‘nil’ if
     there are no values.  “The primary value returned by ‘truncate’ is
     an integer quotient, truncated toward zero.”

principal adj. (of a value returned by a Common Lisp function that
     implements a mathematically irrational or transcendental function
     defined in the complex domain) of possibly many (sometimes an
     infinite number of) correct values for the mathematical function,
     being the particular value which the corresponding Common
     Lisp function has been defined to return.

print name n. Trad. (usually of a symbol)
     a name

printer control variable n. 
     a variable whose specific purpose is to control some action of the
     Lisp printer; that is, one of the variables in *note Figure 22.1:
     StdPrinterControlVars, or else some implementation-defined variable
     which is defined by the implementation to be a printer control
     variable.

printer escaping n.
     The combined state of the printer control variables
     ‘*print-escape*’ and ‘*print-readably*’.  If the value of either
     ‘*print-readably*’ or ‘*print-escape*’ is true, then “printer
     escaping” is “enabled”; otherwise (if the values of both
     ‘*print-readably*’ and ‘*print-escape*’ are false), then printer
     escaping is “disabled”.

printing adj. (of a character)
     being a graphic character other than space.

process v.t. (a form by the compiler)
     to perform minimal compilation, determining the time of evaluation
     for a form, and possibly evaluating that form (if required).

processor n., ANSI
     an implementation.

proclaim v.t. (a proclamation)
     to establish that proclamation.

proclamation n. 
     a global declaration.

prog tag n. Trad. 
     a go tag.

program n. Trad. 
     Common Lisp code.

programmer n.
     an active entity, typically a human, that writes a program, and
     that might or might not also be a user of the program.

programmer code n. 
     code that is supplied by the programmer; that is, code that is not
     system code.

proper list 
     n.   A list terminated by the empty list.  (The empty list is a
     proper list.)  See *note improper list: glos-improper list.

proper name n. (of a class)
     a symbol that names the class whose name is that symbol.  See the
     functions *note class-name:: and ‘find-class’.

proper sequence n. 
     a sequence which is not an improper list; that is, a vector or a
     proper list.

proper subtype n. (of a type)
     a subtype of the type which is not the same type as the type (i.e.,
     its elements are a “proper subset” of the type).

property n. (of a property list)
     1.  a conceptual pairing of a property indicator and its associated
     property value on a property list.  2.  a property value.

property indicator n. (of a property list)
     the name part of a property, used as a key when looking up a
     property value on a property list.

property list n. 
     1.  a list containing an even number of elements that are
     alternating names (sometimes called indicators or keys) and values
     (sometimes called properties).  When there is more than one name
     and value pair with the identical name in a property list, the
     first such pair determines the property.  2.  (of a symbol) the
     component of the symbol containing a property list.

property value n. (of a property indicator on
     a property list) the object associated with the property indicator
     on the property list.

purports to conform v.
     makes a good-faith claim of conformance.  This term expresses
     intention to conform, regardless of whether the goal of that
     intention is realized in practice.  For example, language
     implementations have been known to have bugs, and while an
     implementation of this specification with bugs might not be a
     conforming implementation, it can still purport to conform.  This
     is an important distinction in certain specific cases; e.g., see
     the variable *note *features*::.


File: ansicl,  Node: Q,  Next: R,  Prev: P,  Up: Glossary

Q
=

qualified method n. 
     a method that has one or more qualifiers.

qualifier n. (of a method for a generic function)
     one of possibly several objects used to annotate the method in a
     way that identifies its role in the method combination.  The method
     combination type determines how many qualifiers are permitted for
     each method, which qualifiers are permitted, and the semantics of
     those qualifiers.

query I/O n. 
     the bidirectional stream that is the value of the variable
     ‘*query-io*’.

quoted object n. 
     an object which is the second element of a ‘quote’ form.


File: ansicl,  Node: R,  Next: S,  Prev: Q,  Up: Glossary

R
=

radix n.
     an integer between 2 and 36, inclusive, which can be used to
     designate a base with respect to which certain kinds of numeric
     input or output are performed.  (There are n valid digit characters
     for any given radix n, and those digits are the first n digits in
     the sequence ‘0’, ‘1’, ..., ‘9’, ‘A’, ‘B’, ..., ‘Z’, which have the
     weights ‘0’, ‘1’, ..., ‘9’, ‘10’, ‘11’, ..., ‘35’, respectively.
     Case is not significant in parsing numbers of radix greater than
     ‘10’, so “9b8a” and “9B8A” denote the same radix ‘16’ number.)

random state n. 
     an object of type ‘random-state’.

rank n. 
     a non-negative integer indicating the number of dimensions of an
     array.

ratio n. 
     an object of type ‘ratio’.

ratio marker n. 
     a character which is used in the textual notation for a ratio to
     separate the numerator from the denominator, and which is slash in
     the standard readtable.  See *note Section 2.1 (Character Syntax):
     Character Syntax.

rational n. 
     an object of type ‘rational’.

read v.t. 
     1.  (a binding or slot or component) to obtain the value of the
     binding or slot.  2.  (an object from a stream) to parse an object
     from its representation on the stream.

readably adv. (of a manner of printing an object O
     in such a way as to permit the Lisp Reader to later parse the
     printed output into an object O

reader 
     n.  1.  a function that reads2.  the Lisp reader.

reader macro n.
     1.  a textual notation introduced by dispatch on one or two
     characters that defines special-purpose syntax for use by the Lisp
     reader, and that is implemented by a reader macro function.  See
     *note Section 2.2 (Reader Algorithm): Reader Algorithm.  2.  the
     character or characters that introduce a reader macroa macro
     character or the conceptual pairing of a dispatching macro
     character and the character that follows it.  (A reader macro is
     not a kind of macro.)

reader macro function n.
     a function designator that denotes a function that implements a
     reader macroSee the functions *note set-macro-character:: and
     ‘set-dispatch-macro-character’.

readtable n.
     an object of type ‘readtable’.

readtable case n.
     an attribute of a readtable whose value is a case sensitivity mode,
     and that selects the manner in which characters in a symbol’s name
     are to be treated by the Lisp reader and the Lisp printer.  See
     *note Section 23.1.2 (Effect of Readtable Case on the Lisp Reader):
     Effect of Readtable Case on the Lisp Reader. and *note Section
     22.1.3.3.2 (Effect of Readtable Case on the Lisp Printer):
     ReadtableCasePrintEffect.

readtable designator n.
     a designator for a readtable; that is, an object that denotes a
     readtable and that is one of: ‘nil’ (denoting the standard
     readtable), or a readtable (denoting itself).

recognizable subtype n. (of a type)
     a subtype of the type which can be reliably detected to be such by
     the implementation.  See the function *note subtypep::.

reference n., v.t. 
     1.  n. an act or occurrence of referring to an object, a binding,
     an exit point, a tag, or an environment.  2.  v.t. to refer to an
     object, a binding, an exit point, a tag, or an environment, usually
     by name.

registered package n.
     a package object that is installed in the package registry.  (Every
     registered package has a name that is a string, as well as zero or
     more string nicknames.  All packages that are initially specified
     by Common Lisp  or created by ‘make-package’ or ‘defpackage’ are
     registered packages.  Registered packages can be turned into
     unregistered packages by ‘delete-package’.)

relative 
     adj.  1.  (of a time) representing an offset from an absolute time
     in the units appropriate to that time.  For example, a relative
     internal time is the difference between two absolute internal
     times, and is measured in internal time units.  2.  (of a pathname)
     representing a position in a directory hierarchy by motion from a
     position other than the root, which might therefore vary.  “The
     notation ‘#P"../foo.text"’ denotes a relative pathname if the host
     file system is Unix.” See *note absolute: glos-absolute.

repertoire n., ISO
     a subtype of ‘character’.  See *note Section 13.1.2.2 (Character
     Repertoires): CharRepertoires.

report n. (of a condition)
     to call the function ‘print-object’ on the condition in an
     environment where the value of ‘*print-escape*’ is false.

report message n.
     the text that is output by a condition reporter.

required parameter n.
     A parameter for which a corresponding positional argument must be
     supplied when calling the function.

rest list n. (of a function having a rest parameter)
     The list to which the rest parameter is bound on some particular
     call to the function.

rest parameter n.
     A parameter which was introduced by ‘&rest’.

restart n. 
     an object of type ‘restart’.

restart designator n.
     a designator for a restart; that is, an object that denotes a
     restart and that is one of: a non-nil symbol (denoting the most
     recently established active restart whose name is that symbol), or
     a restart (denoting itself).

restart function n.
     a function that invokes a restart, as if by ‘invoke-restart’.  The
     primary purpose of a restart function is to provide an alternate
     interface.  By convention, a restart function usually has the same
     name as the restart which it invokes.  The next figure shows a list
     of the standardized restart functions.

     abort      muffle-warning   use-value
     continue   store-value

     Figure 26.4: Standardized Restart Functions

return v.t. (of values)
     1.  (from a block) to transfer control and values from the block;
     that is, to cause the block to yield the values immediately without
     doing any further evaluation of the forms in its body.  2.  (from a
     form) to yield the values.

return value n. Trad. 
     a value

right-parenthesis n.
     the standard character “‘)’”, that is variously called “right
     parenthesis” or “close parenthesis” See *note Figure 2.5:
     StdCharsThree.

run time n.
     1.  load time 2.  execution time

run-time compiler n.
     refers to the ‘compile’ function or to implicit compilation, for
     which the compilation and run-time environments are maintained in
     the same Lisp image.

run-time definition n.
     a definition in the run-time environment.

run-time environment n.
     the environment in which a program is executed.


File: ansicl,  Node: S,  Next: T,  Prev: R,  Up: Glossary

S
=

safe adj. 
     1.  (of code) processed in a lexical environment where the the
     highest ‘safety’ level (‘3’) was in effect.  See *note optimize::.
     2.  (of a call) a safe call.

safe call n.
     a call in which the call, the function being called, and the point
     of functional evaluation are all safeFor more detailed information,
     see *note Section 3.5.1.1 (Safe and Unsafe Calls):
     SafeAndUnsafeCalls.

same adj. 
     1.  (of objects under a specified predicate) indistinguishable by
     that predicate.  “The symbol ‘car’, the string ‘"car"’, and the
     string ‘"CAR"’ are the ‘same’ under ‘string-equal’”.  2.  (of
     objects if no predicate is implied by context) indistinguishable by
     ‘eql’.  Note that ‘eq’ might be capable of distinguishing some
     numbers and characters which ‘eql’ cannot distinguish, but the
     nature of such, if any, is implementation-dependent.  Since ‘eq’ is
     used only rarely in this specification, ‘eql’ is the default
     predicate when none is mentioned explicitly.  “The conses returned
     by two successive calls to ‘cons’ are never the same.” 3.  (of
     types) having the same set of elements; that is, each type is a
     subtype of the others.  “The types specified by ‘(integer 0 1)’,
     ‘(unsigned-byte 1)’, and ‘bit’ are the same.”

satisfy the test v. 
     (of an object being considered by a sequence function) 1.  (for a
     one argument test) to be in a state such that the function which is
     the PREDICATE argument to the sequence function returns true when
     given a single argument that is the result of calling the sequence
     function’s KEY argument on the object being considered.  See *note
     Section 17.2.2 (Satisfying a One-Argument Test): Satisfying a
     One-Argument Test.  2.  (for a two argument test) to be in a state
     such that the two-place predicate which is the sequence function’s
     TEST argument returns true when given a first argument that is the
     object being considered, and when given a second argument that is
     the result of calling the sequence function’s KEY argument on an
     element of the sequence function’s SEQUENCE argument which is being
     tested for equality; or to be in a state such that the TEST-NOT
     function returns false given the same arguments.  See *note Section
     17.2.1 (Satisfying a Two-Argument Test): Satisfying a Two-Argument
     Test.

scope n. 
     the structural or textual region of code in which references to an
     object, a binding, an exit point, a tag, or an environment (usually
     by name) can occur.

script n. ISO
     one of possibly several sets that form an exhaustive partition of
     the type ‘character’.  See *note Section 13.1.2.1 (Character
     Scripts): CharScripts.

secondary value n. (of values resulting from the
     evaluation of a form) the second value, if any, or else ‘nil’ if
     there are fewer than two values.  “The secondary value returned by
     ‘truncate’ is a remainder.”

section n.
     a partitioning of output by a conditional newline on a pretty
     printing stream.  See *note Section 22.2.1.1 (Dynamic Control of
     the Arrangement of Output): DynamicControlofOutput.

self-evaluating object n.
     an object that is neither a symbol nor a cons.  If a
     self-evaluating object is evaluated, it yields itself as its only
     value.  “Strings are self-evaluating objects.”

semi-standard adj. (of a language feature)
     not required to be implemented by any conforming implementation,
     but nevertheless recommended as the canonical approach in
     situations where an implementation does plan to support such a
     feature.  The presence of semi-standard aspects in the language is
     intended to lessen portability problems and reduce the risk of
     gratuitous divergence among implementations that might stand in the
     way of future standardization.

semicolon n.
     the standard character that is called “semicolon” (‘;’).  See *note
     Figure 2.5: StdCharsThree.

sequence n. 
     1.  an ordered collection of elements 2.  a vector or a list.

sequence function n.
     one of the functions in *note Figure 17.1: SequenceFunctions, or an
     implementation-defined function that operates on one or more
     sequences.  and that is defined by the implementation to be a
     sequence function.

sequential 
     adj. Trad. (of binding or assignment) done in the style of ‘setq’,
     ‘let*’, or ‘do*’; that is, interleaving the evaluation of the forms
     that produce values with the assignments or bindings of the
     variables (or places).  See *note parallel: glos-parallel.

sequentially adv.
     in a sequential way.

serious condition n. 
     a condition of type ‘serious-condition’, which represents a
     situation that is generally sufficiently severe that entry into the
     debugger should be expected if the condition is signaled but not
     handled.

session n.
     the conceptual aggregation of events in a Lisp image from the time
     it is started to the time it is terminated.

set v.t. Trad. (any variable
     or a symbol that is the name of a dynamic variable) to assign the
     variable.

setf expander n. 
     a function used by ‘setf’ to compute the setf expansion of a place.

setf expansion n. 
     a set of five expressionshow to store into a place and which
     subforms of the macro call associated with the place are evaluated.
     See *note Section 5.1.1.2 (Setf Expansions): SetfExpansions.

setf function n.
     a function whose name is ‘(setf symbol)’.

setf function name n. (of a symbol S)
     the list ‘(setf S)’.

shadow v.t. 
     1.  to override the meaning of.  “That binding of ‘X’ shadows an
     outer one.” 2.  to hide the presence of.  “That ‘macrolet’ of ‘F’
     shadows the outer ‘flet’ of ‘F’.” 3.  to replace.  “That package
     shadows the symbol ‘cl:car’ with its own symbol ‘car’.”

shadowing symbol n. (in a package)
     an element of the package’s shadowing symbols list.

shadowing symbols list n. (of a package)
     a list, associated with the package, of symbols that are to be
     exempted from ‘symbol conflict errors’ detected when packages are
     used.  See the function *note package-shadowing-symbols::.

shared slot n. (of a class)
     a slot accessible in more than one instance of a class;
     specifically, such a slot is accessible in all direct instances of
     the class and in those indirect instances whose class does not
     shadow

sharpsign n.
     the standard character that is variously called “number sign,”
     “sharp,” or “sharp sign” (‘#’).  See *note Figure 2.5:
     StdCharsThree.

short float n. 
     an object of type ‘short-float’.

sign n. 
     one of the standard characters “‘+’” or “‘-’”.

signal v. 
     to announce, using a standard protocol, that a particular
     situation, represented by a condition, has been detected.  See
     *note Section 9.1 (Condition System Concepts): Condition System
     Concepts.

signature n. (of a method)
     a description of the parameters and parameter specializers for the
     method which determines the method’s applicability for a given set
     of required arguments, and which also describes the argument
     conventions for its other, non-required arguments.

similar adj. (of two objects)
     defined to be equivalent under the similarity relationship.

similarity n.
     a two-place conceptual equivalence predicate, which is independent
     of the Lisp image so that two objects in different Lisp images can
     be understood to be equivalent under this predicate.  See *note
     Section 3.2.4 (Literal Objects in Compiled Files): Literal Objects
     in Compiled Files.

simple adj.
     1.  (of an array) being of type ‘simple-array’.  2.  (of a
     character) having no implementation-defined attributes, or else
     having implementation-defined attributes each of which has the null
     value for that attribute.

simple array n. 
     an array of type ‘simple-array’.

simple bit array n.
     a bit array that is a simple array; that is, an object of type
     ‘(simple-array bit)’.

simple bit vector n. 
     a bit vector of type ‘simple-bit-vector’.

simple condition n. 
     a condition of type ‘simple-condition’.

simple general vector n. 
     a simple vector.

simple string n. 
     a string of type ‘simple-string’.

simple vector n.
     a vector of type ‘simple-vector’, sometimes called a “simple
     general vector.” Not all vectors that are simple are simple
     vectors—only those that have element type ‘t’.

single escape n., adj.
     1.  n. the syntax type of a character that indicates that the next
     character is to be treated as an alphabeticwith its case preserved.
     For details, see *note Section 2.1.4.6 (Single Escape Character):
     SingleEscapeChar.  2.  adj. (of a character) having the single
     escape syntax type.  3.  n. a single escape(In the standard
     readtable, slash is the only single escape.)

single float n. 
     an object of type ‘single-float’.

single-quote n.
     the standard character that is variously called “apostrophe,”
     “acute accent,” “quote,” or “single quote” (‘'’).  See *note Figure
     2.5: StdCharsThree.

singleton adj. (of a sequence)
     having only one element.  “‘(list 'hello)’ returns a singleton
     list.”

situation n. 
     the evaluation of a form in a specific environment.

slash n.
     the standard character that is variously called “solidus” or
     “slash” (‘/’).  See *note Figure 2.5: StdCharsThree.

slot n. 
     a component of an object that can store a value.

slot specifier n.
     a representation of a slot that includes the name of the slot and
     zero or more slot options.  A slot option pertains only to a single
     slot.

source code n. 
     code representing objects suitable for evaluation (e.g., objects
     created by ‘read’, by macro expansion, or by compiler macro
     expansion).

source file n. 
     a file which contains a textual representation of source code, that
     can be edited, loaded, or compiled.

space n.
     the standard character <Space>, notated for the Lisp reader as
     ‘#\Space’.

special form n. 
     a list, other than a macro form, which is a form with special
     syntax or special evaluation rules or both, possibly manipulating
     the evaluation environment or control flow or both.  The first
     element of a special form is a special operator.

special operator n. 
     one of a fixed set of symbols, enumerated in *note Figure 3.2:
     CLSpecialOps, that may appear in the car of a form in order to
     identify the form as a special form.

special variable n. Trad.
     a dynamic variable.

specialize v.t. (a generic function)
     to define a method for the generic function, or in other words, to
     refine the behavior of the generic function by giving it a specific
     meaning for a particular set of classes or arguments.

specialized adj. 
     1.  (of a generic function) having methods which specialize the
     generic function.  2.  (of an array) having an actual array element
     type that is a proper subtype of the type ‘t’; see *note Section
     15.1.1 (Array Elements): Array Elements.  “‘(make-array 5
     :element-type 'bit)’ makes an array of length five that is
     specialized for bits.”

specialized lambda list n.
     an extended lambda list used in forms that establish method
     definitions, such as ‘defmethod’.  See *note Section 3.4.3
     (Specialized Lambda Lists): Specialized Lambda Lists.

spreadable argument list designator n.
     a designator for a list of objects; that is, an object that denotes
     a list and that is a non-null list L1 of length n, whose last
     element is a list L2 of length m (denoting a list L3 of length
     m+n-1 whose elements are L1“The list (1 2 (3 4 5)) is a spreadable
     argument list designator for the list (1 2 3 4 5).”

stack allocate v.t. Trad. 
     to allocate in a non-permanent way, such as on a stack.
     Stack-allocation is an optimization technique used in some
     implementations for allocating certain kinds of objects that have
     dynamic extent.  Such objects are allocated on the stack rather
     than in the heap so that their storage can be freed as part of
     unwinding the stack rather than taking up space in the heap until
     the next garbage collection.  What types (if any) can have dynamic
     extent can vary from implementation to implementation.  No
     implementation is ever required to perform stack-allocation.

stack-allocated adj. Trad. 
     having been stack allocated.

standard character n. 
     a character of type ‘standard-char’, which is one of a fixed set of
     96 such characters required to be present in all conforming
     implementations.  See *note Section 2.1.3 (Standard Characters):
     Standard Characters.

standard class n. 
     a class that is a generalized instance of class ‘standard-class’.

standard generic function
     a function of type ‘standard-generic-function’.

standard input n. 
     the input stream which is the value of the dynamic variable
     ‘*standard-input*’.

standard method combination n. 
     the method combination named ‘standard’.

standard object n. 
     an object that is a generalized instance of class
     ‘standard-object’.

standard output n. 
     the output stream which is the value of the dynamic variable
     ‘*standard-output*’.

standard pprint dispatch table n.
     A pprint dispatch table that is different from the initial pprint
     dispatch table, that implements pretty printing as described in
     this specification, and that, unlike other pprint dispatch tables,
     must never be modified by any program.  (Although the definite
     reference “the standard pprint dispatch table” is generally used
     within this document, it is actually implementation-dependent
     whether a single object fills the role of the standard pprint
     dispatch table, or whether there might be multiple such objects,
     any one of which could be used on any given occasion where “the
     standard pprint dispatch table” is called for.  As such, this
     phrase should be seen as an indefinite reference in all cases
     except for anaphoric references.)

standard readtable n.
     A readtable that is different from the initial readtable, that
     implements the expression syntax defined in this specification, and
     that, unlike other readtables, must never be modified by any
     program.  (Although the definite reference “the standard readtable”
     is generally used within this document, it is actually
     implementation-dependent whether a single object fills the role of
     the standard readtable, or whether there might be multiple such
     objects, any one of which could be used on any given occasion where
     “the standard readtable” is called for.  As such, this phrase
     should be seen as an indefinite reference in all cases except for
     anaphoric references.)

standard syntax n.
     the syntax represented by the standard readtable and used as a
     reference syntax throughout this document.  See *note Section 2.1
     (Character Syntax): Character Syntax.

standardized adj. (of a name, object, or definition)
     having been defined by Common Lisp.  “All standardized variables
     that are required to hold bidirectional streams have “‘-io*’” in
     their name.”

startup environment n.
     the global environment of the running Lisp image from which the
     compiler was invoked.

step v.t., n. 
     1.  v.t. (an iteration variable) to assign the variable a new value
     at the end of an iteration, in preparation for a new iteration.  2.
     n. the code that identifies how the next value in an iteration is
     to be computed.  3.  v.t. (code) to specially execute the code,
     pausing at intervals to allow user confirmation or intervention,
     usually for debugging.

stream n. 
     an object that can be used with an input or output function to
     identify an appropriate source or sink of characters or bytes for
     that operation.

stream associated with a file n. 
     a file stream, or a synonym stream the target of which is a stream
     associated with a file.  Such a stream cannot be created with
     ‘make-two-way-stream’, ‘make-echo-stream’, ‘make-broadcast-stream’,
     ‘make-concatenated-stream’, ‘make-string-input-stream’, or
     ‘make-string-output-stream’.

stream designator n.
     a designator for a stream; that is, an object that denotes a stream
     and that is one of: ‘t’ (denoting the value of ‘*terminal-io*’),
     ‘nil’ (denoting the value of ‘*standard-input*’ for input stream
     designators or denoting the value of ‘*standard-output*’ for output
     stream designators), or a stream (denoting itself).

stream element type n. (of a stream)
     the type of data for which the stream is specialized.

stream variable n.
     a variable whose value must be a stream.

stream variable designator n.
     a designator for a stream variable; that is, a symbol that denotes
     a stream variable and that is one of: ‘t’ (denoting
     ‘*terminal-io*’), ‘nil’ (denoting ‘*standard-input*’ for input
     stream variable designators or denoting ‘*standard-output*’ for
     output stream variable designators), or some other symbol (denoting
     itself).

string n. 
     a specialized vector that is of type ‘string’, and whose elements
     are of type ‘character’ or a suptype of type ‘character’.

string designator n.
     a designator for a string; that is, an object that denotes a string
     and that is one of: a character (denoting a singleton string that
     has the character as its only element), a symbol (denoting the
     string that is its name), or a string (denoting itself).  The
     intent is that this term be consistent with the behavior of
     ‘string’; implementations that extend ‘string’ must extend the
     meaning of this term in a compatible way.

string equal adj. 
     the same under ‘string-equal’.

string stream n. 
     a stream of type ‘string-stream’.

structure n. 
     an object of type ‘structure-object’.

structure class n. 
     a class that is a generalized instance of class ‘structure-class’.

structure name n.
     a name defined with ‘defstruct’.  Usually, such a type is also a
     structure class, but there may be implementation-dependent
     situations in which this is not so, if the :type option to
     ‘defstruct’ is used.

style warning n.
     a condition of type ‘style-warning’.

subclass 
     n.   a class that inherits from another class, called a superclass.
     (No class is a subclass of itself.)

subexpression n. (of an expression)
     an expression that is contained within the expression.  (In fact,
     the state of being a subexpression is not an attribute of the
     subexpression, but really an attribute of the containing expression
     since the same object can at once be a subexpression in one
     context, and not in another.)

subform n. (of a form)
     an expression that is a subexpression of the form, and which by
     virtue of its position in that form is also a form.  “‘(f x)’ and
     ‘x’, but not ‘exit’, are subforms of ‘(return-from exit (f x))’.”

subrepertoire n. 
     a subset of a repertoire.

subtype 
     n.   a type whose membership is the same as or a proper subset of
     the membership of another type, called a supertype.  (Every type is
     a subtype of itself.)

superclass n. 
     a class from which another class (called a subclass) inherits.  (No
     class is a superclass of itself.)  See *note subclass:
     glos-subclass.

supertype n. 
     a type whose membership is the same as or a proper superset of the
     membership of another type, called a subtype.  (Every type is a
     supertype of itself.)  See *note subtype: glos-subtype.

supplied-p parameter 
     n.  a parameter which recieves its generalized boolean value
     implicitly due to the presence or absence of an argument
     corresponding to another parameter (such as an optional parameter
     or a rest parameter).  See *note Section 3.4.1 (Ordinary Lambda
     Lists): Ordinary Lambda Lists.

symbol n. 
     an object of type ‘symbol’.

symbol macro n. 
     a symbol that stands for another form.  See the macro *note
     symbol-macrolet::.

synonym stream n. 
     1.  a stream of type ‘synonym-stream’, which is consequently a
     stream that is an alias for another stream, which is the value of a
     dynamic variable whose name is the synonym stream symbol of the
     synonym stream.  See the function *note make-synonym-stream::.  2.
     (to a stream) a synonym stream which has the stream as the value of
     its synonym stream symbol.  3.  (to a symbol) a synonym stream
     which has the symbol as its synonym stream symbol.

synonym stream symbol n. (of a synonym stream)
     the symbol which names the dynamic variable which has as its value
     another stream for which the synonym stream is an alias.

syntax type n. (of a character)
     one of several classifications, enumerated in *note Figure 2.6:
     PossibleSyntaxTypes, that are used for dispatch during parsing by
     the Lisp reader.  See *note Section 2.1.4 (Character Syntax Types):
     Character Syntax Types.

system class n. 
     a class that may be of type ‘built-in-class’ in a conforming
     implementation and hence cannot be inherited by classes defined by
     conforming programs.

system code n. 
     code supplied by the implementation to implement this specification
     (e.g., the definition of ‘mapcar’) or generated automatically in
     support of this specification (e.g., during method combination);
     that is, code that is not programmer code.


File: ansicl,  Node: T,  Next: U,  Prev: S,  Up: Glossary

T
=

t 
     n.   1.  a.  the boolean representing true.  b.  the canonical
     generalized boolean representing true.  (Although any object other
     than ‘nil’ is considered true as a generalized boolean, ‘t’ is
     generally used when there is no special reason to prefer one such
     object over another.)  2.  the name of the type to which all
     objects belong—the supertype of all types (including itself).  3.
     the name of the superclass of all classes except itself.

tag n. 
     1.  a catch tag.  2.  a go tag.

tail n. (of a list)
     an object that is the same as either some cons which makes up that
     list or the atom (if any) which terminates the list.  “The empty
     list is a tail of every proper list.”

target n. 
     1.  (of a constructed stream) a constituent of the constructed
     stream.  “The target of a synonym stream is the value of its
     synonym stream symbol.” 2.  (of a displaced array) the array to
     which the displaced array is displaced.  (In the case of a chain of
     constructed streams or displaced arrays, the unqualified term
     “target” always refers to the immediate target of the first item in
     the chain, not the immediate target of the last item.)

terminal I/O n. 
     the bidirectional stream that is the value of the variable
     ‘*terminal-io*’.

terminating n. (of a macro character)
     being such that, if it appears while parsing a token, it terminates
     that token.  See *note Section 2.2 (Reader Algorithm): Reader
     Algorithm.

tertiary value n. (of values resulting from the
     evaluation of a form) the third value, if any, or else ‘nil’ if
     there are fewer than three values.

throw v. 
     to transfer control and values to a catch.  See the special
     operator *note throw::.

tilde n.
     the standard character that is called “tilde” (‘~’).  See *note
     Figure 2.5: StdCharsThree.

time
     a representation of a point (absolute time) or an interval
     (relative time) on a time line.  See *note decoded time:
     glos-decoded time, internal time, and universal time.

time zone n.
     a rational multiple of ‘1/3600’ between ‘-24’ (inclusive) and ‘24’
     (inclusive) that represents a time zone as a number of hours offset
     from Greenwich Mean Time.  Time zone values increase with motion to
     the west, so Massachusetts, U.S.A. is in time zone ‘5’, California,
     U.S.A. is time zone ‘8’, and Moscow, Russia is time zone -3.  (When
     “daylight savings time” is separately represented as an argument or
     return value, the time zone that accompanies it does not depend on
     whether daylight savings time is in effect.)

token n.
     a textual representation for a number or a symbol.  See *note
     Section 2.3 (Interpretation of Tokens): Interpretation of Tokens.

top level form n. 
     a form which is processed specially by ‘compile-file’ for the
     purposes of enabling compile time evaluation of that form.  Top
     level forms include those forms which are not subforms of any other
     form, and certain other cases.  See *note Section 3.2.3.1
     (Processing of Top Level Forms): TopLevelForms.

trace output n. 
     the output stream which is the value of the dynamic variable
     ‘*trace-output*’.

tree n. 
     1.  a binary recursive data structure made up of conses and atoms:
     the conses are themselves also trees (sometimes called “subtrees”
     or “branches”), and the atoms are terminal nodes (sometimes called
     leaves).  Typically, the leaves represent data while the branches
     establish some relationship among that data.  2.  in general, any
     recursive data structure that has some notion of “branches” and
     leaves.

tree structure n. (of a tree
     the set of conses that make up the tree.  Note that while the
     car[1b] component of each such cons is part of the tree structure,
     the objects that are the carsin the tree are not themselves part of
     its tree structure unless they are also conses.

true n. 
     any object that is not false and that is used to represent the
     success of a predicate test.  See *note t: glos-t.

truename n. 
     1.  the canonical filename of a file in the file system.  See *note
     Section 20.1.3 (Truenames): Truenames.  2.  a pathname representing
     a truename

two-way stream n. 
     a stream of type ‘two-way-stream’, which is a bidirectional
     composite stream that receives its input from an associated input
     stream and sends its output to an associated output stream.

type n. 
     1.  a set of objects, usually with common structure, behavior, or
     purpose.  (Note that the expression “X is of type SNATURALLY
     IMPLIES THAT “X IS OF TYPE SS2. (IMMEDIATELY FOLLOWING THE NAME OF
     A TYPE) A SUBTYPE OF THAT TYPE. “THE TYPE ‘VECTOR’ IS AN ARRAY
     TYPE.”
type declaration n. 
     a declaration that asserts that every reference to a specified
     binding within the scope of the declaration results in some object
     of the specified type.

type equivalent adj. (of two types X and Y)
     having the same elements; that is, X is a subtype of Y and Y is a
     subtype of X.

type expand n.
     to fully expand a type specifier, removing any references to
     derived types.  (Common Lisp provides no program interface to cause
     this to occur, but the semantics of Common Lisp are such that every
     implementation must be able to do this internally, and some
     situations involving type specifiers are most easily described in
     terms of a fully expanded type specifier.)

type specifier n. 
     an expression that denotes a type.  “The symbol ‘random-state’, the
     list ‘(integer 3 5)’, the list ‘(and list (not null))’, and the
     class named ‘standard-class’ are type specifiers.”


File: ansicl,  Node: U,  Next: V,  Prev: T,  Up: Glossary

U
=

unbound 
     adj.   not having an associated denotation in a binding.  See *note
     bound: glos-bound.

unbound variable n.
     a name that is syntactically plausible as the name of a variable
     but which is not bound in the variable namespace.

undefined function n.
     a name that is syntactically plausible as the name of a function
     but which is not bound in the function namespace.

unintern v.t. (a symbol in a package)
     to make the symbol not be present in that package.  (The symbol
     might continue to be accessible by inheritance.)

uninterned adj. (of a symbol)
     not accessible in any package; i.e., not interned

universal time n.
     time, represented as a non-negative integer number of seconds.
     Absolute universal time is measured as an offset from the beginning
     of the year 1900 (ignoring leap seconds).  See *note Section
     25.1.4.2 (Universal Time): UniversalTime.

unqualified method n. 
     a method with no qualifiers.

unregistered package n.
     a package object that is not present in the package registry.  An
     unregistered package has no name; i.e., its name is ‘nil’.  See the
     function *note delete-package::.

unsafe adj. (of code)
     not safe.  (Note that, unless explicitly specified otherwise, if a
     particular kind of error checking is guaranteed only in a safe
     context, the same checking might or might not occur in that context
     if it were unsafe; describing a context as unsafe means that
     certain kinds of error checking are not reliably enabled but does
     not guarantee that error checking is definitely disabled.)

unsafe call n.
     a call that is not a safe call.  For more detailed information, see
     *note Section 3.5.1.1 (Safe and Unsafe Calls): SafeAndUnsafeCalls.

upgrade v.t. (a declared type to an actual type)
     1.  (when creating an array) to substitute an actual array element
     type for an expressed array element type when choosing an
     appropriately specialized array representation.  See the function
     *note upgraded-array-element-type::.  2.  (when creating a complex)
     to substitute an actual complex part type for an expressed complex
     part type when choosing an appropriately specialized complex
     representation.  See the function *note
     upgraded-complex-part-type::.

upgraded array element type n. (of a type)
     a type that is a supertype of the type and that is used instead of
     the type whenever the type is used as an array element type for
     object creation or type discrimination.  See *note Section 15.1.2.1
     (Array Upgrading): ArrayUpgrading.

upgraded complex part type n. (of a type)
     a type that is a supertype of the type and that is used instead of
     the type whenever the type is used as a complex part type for
     object creation or type discrimination.  See the function *note
     upgraded-complex-part-type::.

uppercase adj. (of a character)
     being among standard characters corresponding to the capital
     letters ‘A’ through ‘Z’, or being some other implementation-defined
     character that is defined by the implementation to be uppercase.
     See *note Section 13.1.4.3 (Characters With Case):
     CharactersWithCase.

use v.t. (a package P
     to inherit the external symbols of P(If a package Pthe external
     symbols of Pbecome internal symbols of Punless they are explicitly
     exported.)  “The package ‘CL-USER’ uses the package ‘CL’.”

use list n. (of a package)
     a (possibly empty) list associated with each package which
     determines what other packages are currently being used by that
     package.

user n. 
     an active entity, typically a human, that invokes or interacts with
     a program at run time, but that is not necessarily a programmer.


File: ansicl,  Node: V,  Next: W,  Prev: U,  Up: Glossary

V
=

valid array dimension n. 
     a fixnum suitable for use as an array dimension.  Such a fixnum
     must be greater than or equal to zero, and less than the value of
     ‘array-dimension-limit’.  When multiple array dimensions are to be
     used together to specify a multi-dimensional array, there is also
     an implied constraint that the product of all of the dimensions be
     less than the value of ‘array-total-size-limit’.

valid array index n. (of an array)
     a fixnum suitable for use as one of possibly several indices needed
     to name an element of the array according to a multi-dimensional
     Cartesian coordinate system.  Such a fixnum must be greater than or
     equal to zero, and must be less than the corresponding dimensionof
     the array.  (Unless otherwise explicitly specified, the phrase “a
     list of valid array indices” further implies that the length of the
     list must be the same as the rank of the array.)  “For a ‘2’ by ‘3’
     array, valid array indices for the first dimension are ‘0’ and ‘1’,
     and valid array indices for the second dimension are ‘0’, ‘1’
     and ‘2’.”

valid array row-major index n. (of an array,
     which might have any number of dimensionsa single fixnum suitable
     for use in naming any element of the array, by viewing the array’s
     storage as a linear series of elements in row-major order.  Such a
     fixnum must be greater than or equal to zero, and less than the
     array total size of the array.

valid fill pointer n. (of an array)
     a fixnum suitable for use as a fill pointer for the array.  Such a
     fixnum must be greater than or equal to zero, and less than or
     equal to the array total size of the array.

valid logical pathname host n.
     a string that has been defined as the name of a logical host.  See
     the function *note load-logical-pathname-translations::.

valid pathname device n.
     a string, ‘nil’, :unspecific, or some other object defined by the
     implementation to be a valid pathname device.

valid pathname directory n.
     a string, a list of strings, ‘nil’, :wild, :unspecific, or some
     other object defined by the implementation to be a valid directory
     component.

valid pathname host n.
     a valid physical pathname host or a valid logical pathname host.

valid pathname name n.
     a string, ‘nil’, :wild, :unspecific, or some other object defined
     by the implementation to be a valid pathname name.

valid pathname type n.
     a string, ‘nil’, :wild, :unspecific.

valid pathname version n.
     a non-negative integer, or one of :wild, :newest, :unspecific, or
     ‘nil’.  The symbols :oldest, :previous, and :installed are
     semi-standard special version symbols.

valid physical pathname host n.
     any of a string, a list of strings, or the symbol :unspecific, that
     is recognized by the implementation as the name of a host.

valid sequence index n. (of a sequence)
     an integer suitable for use to name an element of the sequence.
     Such an integer must be greater than or equal to zero, and must be
     less than the length of the sequence.  (If the sequence is an
     array, the valid sequence index is further constrained to be a
     fixnum.)

value n. 
     1.  a.  one of possibly several objects that are the result of an
     evaluation.  b.  (in a situation where exactly one value is
     expected from the evaluation of a form) the primary value returned
     by the form.  c.  (of forms in an implicit progn) one of possibly
     several objects that result from the evaluation of the last form,
     or ‘nil’ if there are no forms.  2.  an object associated with a
     name in a binding.  3.  (of a symbol) the value of the dynamic
     variable named by that symbol.  4.  an object associated with a key
     in an association list, a property list, or a hash table.

value cell n. Trad. (of a symbol)
     The place which holds the value, if any, of the dynamic variable
     named by that symbol, and which is accessed by ‘symbol-value’.  See
     *note cell: glos-cell.

variable n. 
     a binding in the “variable” namespace.  See *note Section 3.1.2.1.1
     (Symbols as Forms): SymbolsAsForms.

vector n. 
     a one-dimensional array.

vertical-bar n.
     the standard character that is called “vertical bar” (‘|’).  See
     *note Figure 2.5: StdCharsThree.


File: ansicl,  Node: W,  Next: Y,  Prev: V,  Up: Glossary

W
=

whitespace n. 
     1.  one or more characters that are either the graphic character
     ‘#\Space’ or else non-graphic characters such as ‘#\Newline’ that
     only move the print position.  2.  a.  n. the syntax type of a
     character that is a token separator.  For details, see *note
     Section 2.1.4.7 (Whitespace Characters): WhitespaceChars.  b.
     adj. (of a character) having the whitespace[2a] syntax typec.  n. a
     whitespace[2b] character.

wild adj.
     1.  (of a namestring) using an implementation-defined syntax for
     naming files, which might “match” any of possibly several possible
     filenames, and which can therefore be used to refer to the
     aggregate of the files named by those filenames.  2.  (of a
     pathname) a structured representation of a name which might “match”
     any of possibly several pathnames, and which can therefore be used
     to refer to the aggregate of the files named by those pathnames.
     The set of wild pathnames includes, but is not restricted to,
     pathnames which have a component which is :wild, or which have a
     directory component which contains :wild or :wild-inferors.  See
     the function *note wild-pathname-p::.

write v.t. 
     1.  (a binding or slot or component) to change the value of the
     binding or slot.  2.  (an object to a stream) to output a
     representation of the object to the stream.

writer n.
     a function that writes


File: ansicl,  Node: Y,  Prev: W,  Up: Glossary

Y
=

yield v.t. (values)
     to produce the values as the result of evaluation.  “The form ‘(+ 2
     3)’ yields ‘5’.”


File: ansicl,  Node: Appendix,  Next: Index,  Prev: Glossary,  Up: Top

Appendix A Appendix
*******************

* Menu:

* Removed Language Features::


File: ansicl,  Node: Removed Language Features,  Up: Appendix

A.1 Removed Language Features
=============================

* Menu:

* Requirements for removed and deprecated features::
* Removed Types::
* Removed Operators::
* Removed Argument Conventions::
* Removed Variables::
* Removed Reader Syntax::
* Packages No Longer Required::


File: ansicl,  Node: Requirements for removed and deprecated features,  Next: Removed Types,  Up: Removed Language Features

A.1.1 Requirements for removed and deprecated features
------------------------------------------------------

For this standard, some features from the language described in ‘Common
Lisp: The Language’ have been removed, and others have been deprecated
(and will most likely not appear in future Common Lisp standards).
Which features were removed and which were deprecated was decided on a
case-by-case basis by the X3J13 committee.

Conforming implementations that wish to retain any removed features for
compatibility must assure that such compatibility does not interfere
with the correct function of conforming programs.  For example, symbols
corresponding to the names of removed functions may not appear in the
the ‘COMMON-LISP’ package.  (Note, however, that this specification has
been devised in such a way that there can be a package named ‘LISP’
which can contain such symbols.)

Conforming implementations must implement all deprecated features.  For
a list of deprecated features, see *note Section 1.8 (Deprecated
Language Features): Deprecated Language Features.


File: ansicl,  Node: Removed Types,  Next: Removed Operators,  Prev: Requirements for removed and deprecated features,  Up: Removed Language Features

A.1.2 Removed Types
-------------------

The type ‘string-char’ was removed.


File: ansicl,  Node: Removed Operators,  Next: Removed Argument Conventions,  Prev: Removed Types,  Up: Removed Language Features

A.1.3 Removed Operators
-----------------------

The functions ‘int-char’ , ‘char-bits’ , ‘char-font’ , ‘make-char’ ,
‘char-bit’ , ‘set-char-bit’ , ‘string-char-p’ , and ‘commonp’ were
removed.

The special operator ‘compiler-let’ was removed.


File: ansicl,  Node: Removed Argument Conventions,  Next: Removed Variables,  Prev: Removed Operators,  Up: Removed Language Features

A.1.4 Removed Argument Conventions
----------------------------------

The FONT argument to ‘digit-char’ was removed.  The BITS and FONT
arguments to ‘code-char’

were removed.


File: ansicl,  Node: Removed Variables,  Next: Removed Reader Syntax,  Prev: Removed Argument Conventions,  Up: Removed Language Features

A.1.5 Removed Variables
-----------------------

The variables ‘char-font-limit’ , ‘char-bits-limit’ , ‘char-control-bit’
, ‘char-meta-bit’ , ‘char-super-bit’ , ‘char-hyper-bit’ , and
‘*break-on-warnings*’ were removed.


File: ansicl,  Node: Removed Reader Syntax,  Next: Packages No Longer Required,  Prev: Removed Variables,  Up: Removed Language Features

A.1.6 Removed Reader Syntax
---------------------------

The “‘#,’” reader macro in standard syntax was removed.


File: ansicl,  Node: Packages No Longer Required,  Prev: Removed Reader Syntax,  Up: Removed Language Features

A.1.7 Packages No Longer Required
---------------------------------

The packages ‘LISP’ , ‘USER’ , and ‘SYSTEM’ are no longer required.  It
is valid for packages with one or more of these names to be provided by
a conforming implementation as extensions.


File: ansicl,  Node: Index,  Next: Symbol Index,  Prev: Appendix,  Up: Top

Index
*****

 [index ]
* Menu:

* #:                                     Sharpsign.           (line   6)
* &allow-other-keys:                     Ordinary Lambda Lists.
                                                              (line 106)
* &aux:                                  Ordinary Lambda Lists.
                                                              (line 214)
* &body:                                 Macro Lambda Lists.  (line  60)
* &environment:                          Macro Lambda Lists.  (line  79)
* &key:                                  Ordinary Lambda Lists.
                                                              (line 107)
* &optional:                             Ordinary Lambda Lists.
                                                              (line  76)
* &rest:                                 Ordinary Lambda Lists.
                                                              (line  94)
* &whole:                                Macro Lambda Lists.  (line  69)
* ’:                                     Single-Quote.        (line   6)
* (:                                     Left-Parenthesis.    (line   6)
* ():                                    Notational Conventions.
                                                              (line 385)
* (setf class-name):                     setf class-name.     (line   6)
* (setf documentation):                  documentation; setf documentation.
                                                              (line   6)
* ):                                     Right-Parenthesis.   (line   6)
* *:                                     * (Function).        (line   6)
* * <1>:                                 *; **; ***.          (line   6)
* **:                                    *; **; ***.          (line   6)
* ***:                                   *; **; ***.          (line   6)
* *break-on-signals*:                    *break-on-signals*.  (line   6)
* *break-on-warnings*:                   Removed Variables.   (line   8)
* *compile-file-pathname*:               *compile-file-pathname*; *compile-file-truename*.
                                                              (line   6)
* *compile-file-truename*:               *compile-file-pathname*; *compile-file-truename*.
                                                              (line   6)
* *compile-print*:                       *compile-print*; *compile-verbose*.
                                                              (line   6)
* *compile-verbose*:                     *compile-print*; *compile-verbose*.
                                                              (line   6)
* *debug-io*:                            *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* *debugger-hook*:                       *debugger-hook*.     (line   6)
* *default-pathname-defaults*:           *default-pathname-defaults*.
                                                              (line   6)
* *error-output*:                        *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* *features*:                            Conforming Programs. (line  64)
* *features* <1>:                        Sharpsign.           (line 437)
* *features* <2>:                        Sharpsign.           (line 460)
* *features* <3>:                        *features*.          (line   6)
* *gensym-counter*:                      *gensym-counter*.    (line   6)
* *load-pathname*:                       *load-pathname*; *load-truename*.
                                                              (line   6)
* *load-print*:                          *load-print*; *load-verbose*.
                                                              (line   6)
* *load-truename*:                       *load-pathname*; *load-truename*.
                                                              (line   6)
* *load-verbose*:                        *load-print*; *load-verbose*.
                                                              (line   6)
* *macroexpand-hook*:                    *macroexpand-hook*.  (line   6)
* *modules*:                             *modules*.           (line   6)
* *package*:                             *package*.           (line   6)
* *print-array*:                         *print-array*.       (line   6)
* *print-base*:                          *print-base*; *print-radix*.
                                                              (line   6)
* *print-case*:                          *print-case*.        (line   6)
* *print-circle*:                        Sharpsign.           (line 397)
* *print-circle* <1>:                    Sharpsign.           (line 409)
* *print-circle* <2>:                    *print-circle*.      (line   6)
* *print-escape*:                        *print-escape*.      (line   6)
* *print-gensym*:                        *print-gensym*.      (line   6)
* *print-length*:                        *print-level*; *print-length*.
                                                              (line   6)
* *print-level*:                         *print-level*; *print-length*.
                                                              (line   6)
* *print-lines*:                         *print-lines*.       (line   6)
* *print-miser-width*:                   *print-miser-width*. (line   6)
* *print-pprint-dispatch*:               *print-pprint-dispatch*.
                                                              (line   6)
* *print-pretty*:                        *print-pretty*.      (line   6)
* *print-radix*:                         *print-base*; *print-radix*.
                                                              (line   6)
* *print-readably*:                      *print-readably*.    (line   6)
* *print-right-margin*:                  *print-right-margin*.
                                                              (line   6)
* *query-io*:                            *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* *random-state*:                        *random-state*.      (line   6)
* *read-base*:                           Sharpsign.           (line 223)
* *read-base* <1>:                       Sharpsign.           (line 233)
* *read-base* <2>:                       Sharpsign.           (line 245)
* *read-base* <3>:                       Sharpsign.           (line 259)
* *read-base* <4>:                       *read-base*.         (line   6)
* *read-default-float-format*:           *read-default-float-format*.
                                                              (line   6)
* *read-eval*:                           Sharpsign.           (line 208)
* *read-eval* <1>:                       *read-eval*.         (line   6)
* *read-suppress*:                       *read-suppress*.     (line   6)
* *readtable*:                           *readtable*.         (line   6)
* *standard-input*:                      *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* *standard-output*:                     *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* *terminal-io*:                         *terminal-io*.       (line   6)
* *trace-output*:                        *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                              (line   6)
* +:                                     Method Selection and Combination.
                                                              (line 234)
* + <1>:                                 + (Function).        (line   6)
* + <2>:                                 +; ++; +++.          (line   6)
* ++:                                    +; ++; +++.          (line   6)
* +++:                                   +; ++; +++.          (line   6)
* ,:                                     Comma.               (line   6)
* -:                                     - (Function).        (line   6)
* - <1>:                                 - (Variable).        (line   6)
* .:                                     Left-Parenthesis.    (line  20)
* ..:                                    Re-Reading Abbreviated Expressions.
                                                              (line   6)
* .. <1>:                                *print-lines*.       (line  21)
* ...:                                   Re-Reading Abbreviated Expressions.
                                                              (line   6)
* ... <1>:                               pprint-pop.          (line  34)
* /:                                     / (Function).        (line   6)
* / <1>:                                 /; //; ///.          (line   6)
* //:                                    /; //; ///.          (line   6)
* ///:                                   /; //; ///.          (line   6)
* /=:                                    =; /=; <; >; <=; >=. (line   6)
* 1+:                                    1+; 1-.              (line   6)
* 1-:                                    1+; 1-.              (line   6)
* :absolute:                             Interpreting Pathname Component Values.
                                                              (line 204)
* :back:                                 Interpreting Pathname Component Values.
                                                              (line 240)
* :common:                               Interpreting Pathname Component Values.
                                                              (line  61)
* :compile-toplevel:                     eval-when.           (line  14)
* :execute:                              eval-when.           (line  15)
* :load-toplevel:                        eval-when.           (line  14)
* :local:                                Interpreting Pathname Component Values.
                                                              (line  47)
* :relative:                             Interpreting Pathname Component Values.
                                                              (line 204)
* :unspecific:                           Interpreting Pathname Component Values.
                                                              (line 110)
* :up:                                   Interpreting Pathname Component Values.
                                                              (line 240)
* :wild:                                 Interpreting Pathname Component Values.
                                                              (line  91)
* :wild <1>:                             Interpreting Pathname Component Values.
                                                              (line 240)
* :wild-inferiors:                       Interpreting Pathname Component Values.
                                                              (line 105)
* :wild-inferiors <1>:                   Interpreting Pathname Component Values.
                                                              (line 240)
* ;:                                     Semicolon.           (line   6)
* <:                                     =; /=; <; >; <=; >=. (line   6)
* <=:                                    =; /=; <; >; <=; >=. (line   6)
* =:                                     =; /=; <; >; <=; >=. (line   6)
* >:                                     =; /=; <; >; <=; >=. (line   6)
* >=:                                    =; /=; <; >; <=; >=. (line   6)
* ‘:                                     Backquote.           (line   6)
* A (format directive):                  FORMAT Printer Operations.
                                                              (line   9)
* A (sharpsign reader macro):            Sharpsign.           (line 321)
* abort:                                 abort (Restart).     (line   6)
* abort <1>:                             abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* abort <2>:                             abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* abs:                                   abs.                 (line   6)
* accessible:                            Introduction to Packages.
                                                              (line  84)
* acons:                                 acons.               (line   6)
* acos:                                  asin; acos; atan.    (line   6)
* acosh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* active:                                Array Elements.      (line  58)
* actual array element type:             Specialized Arrays.  (line  38)
* add-method:                            add-method.          (line   6)
* adjoin:                                adjoin.              (line   6)
* adjust-array:                          adjust-array.        (line   6)
* adjustable-array-p:                    adjustable-array-p.  (line   6)
* allocate-instance:                     allocate-instance.   (line   6)
* alpha-char-p:                          alpha-char-p.        (line   6)
* alphanumericp:                         alphanumericp.       (line   6)
* Ampersand (format directive):          FORMAT Basic Output. (line  59)
* and:                                   and (Type Specifier).
                                                              (line   6)
* and <1>:                               and (Macro).         (line   6)
* and <2>:                               Method Selection and Combination.
                                                              (line 234)
* append:                                Method Selection and Combination.
                                                              (line 234)
* append <1>:                            append.              (line   6)
* apply:                                 apply.               (line   6)
* apropos:                               apropos; apropos-list.
                                                              (line   6)
* apropos-list:                          apropos; apropos-list.
                                                              (line   6)
* aref:                                  aref.                (line   6)
* arithmetic-error:                      arithmetic-error.    (line   6)
* arithmetic-error-operands:             arithmetic-error-operands; arithmetic-error-operation.
                                                              (line   6)
* arithmetic-error-operation:            arithmetic-error-operands; arithmetic-error-operation.
                                                              (line   6)
* array:                                 Sharpsign.           (line 321)
* array <1>:                             array.               (line   6)
* array-dimension:                       array-dimension.     (line   6)
* array-dimension-limit:                 array-dimension-limit.
                                                              (line   6)
* array-dimensions:                      array-dimensions.    (line   6)
* array-displacement:                    array-displacement.  (line   6)
* array-element-type:                    array-element-type.  (line   6)
* array-has-fill-pointer-p:              array-has-fill-pointer-p.
                                                              (line   6)
* array-in-bounds-p:                     array-in-bounds-p.   (line   6)
* array-rank:                            array-rank.          (line   6)
* array-rank-limit:                      array-rank-limit.    (line   6)
* array-row-major-index:                 array-row-major-index.
                                                              (line   6)
* array-total-size:                      array-total-size.    (line   6)
* array-total-size-limit:                array-total-size-limit.
                                                              (line   6)
* arrayp:                                arrayp.              (line   6)
* ash:                                   ash.                 (line   6)
* asin:                                  asin; acos; atan.    (line   6)
* asinh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* assert:                                assert.              (line   6)
* assoc:                                 assoc; assoc-if; assoc-if-not.
                                                              (line   6)
* assoc-if:                              assoc; assoc-if; assoc-if-not.
                                                              (line   6)
* assoc-if-not:                          assoc; assoc-if; assoc-if-not.
                                                              (line   6)
* association list:                      Conses as Lists.     (line  38)
* Asterisk (format directive):           FORMAT Control-Flow Operations.
                                                              (line   9)
* Asterisk (sharpsign reader macro):     Sharpsign.           (line 150)
* atan:                                  asin; acos; atan.    (line   6)
* atanh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* atom:                                  atom (Type).         (line   6)
* atom <1>:                              atom (Function).     (line   6)
* B (format directive):                  FORMAT Radix Control.
                                                              (line  73)
* B (sharpsign reader macro):            Sharpsign.           (line 223)
* Backquote (reader macro):              Backquote.           (line   6)
* Backslash (sharpsign reader macro):    Sharpsign.           (line  78)
* base-char:                             base-char.           (line   6)
* base-string:                           base-string.         (line   6)
* bidirectional:                         Introduction to Streams.
                                                              (line  56)
* bignum:                                bignum.              (line   6)
* binary:                                Introduction to Streams.
                                                              (line   9)
* binding:                               Introduction to Environments.
                                                              (line   6)
* bit:                                   bit (Type).          (line   6)
* bit <1>:                               bit; sbit.           (line   6)
* bit vector:                            Specialized Arrays.  (line  78)
* bit-and:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-andc1:                             bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-andc2:                             bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-eqv:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-ior:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-nand:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-nor:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-not:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-orc1:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-orc2:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* bit-vector:                            Sharpsign.           (line 150)
* bit-vector <1>:                        bit-vector.          (line   6)
* bit-vector-p:                          bit-vector-p.        (line   6)
* bit-xor:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                              (line   6)
* block:                                 block.               (line   6)
* boa lambda list:                       Boa Lambda Lists.    (line   6)
* boole:                                 boole.               (line   6)
* boole-1:                               boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-2:                               boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-and:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-andc1:                           boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-andc2:                           boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-c1:                              boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-c2:                              boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-clr:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-eqv:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-ior:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-nand:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-nor:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-orc1:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-orc2:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-set:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boole-xor:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                              (line   6)
* boolean:                               boolean.             (line   6)
* both-case-p:                           upper-case-p; lower-case-p; both-case-p.
                                                              (line   6)
* bound declaration:                     Declaration Scope.   (line  11)
* boundp:                                boundp.              (line   6)
* break:                                 break.               (line   6)
* broadcast-stream:                      broadcast-stream.    (line   6)
* broadcast-stream-streams:              broadcast-stream-streams.
                                                              (line   6)
* built-in-class:                        built-in-class.      (line   6)
* butlast:                               butlast; nbutlast.   (line   6)
* byte:                                  byte; byte-size; byte-position.
                                                              (line   6)
* byte-position:                         byte; byte-size; byte-position.
                                                              (line   6)
* byte-size:                             byte; byte-size; byte-position.
                                                              (line   6)
* C (format directive):                  FORMAT Basic Output. (line   9)
* C (sharpsign reader macro):            Sharpsign.           (line 294)
* caaaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caaadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caaar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caadar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caaddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caadr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caar:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cadaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cadadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cadar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caddar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cadddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* caddr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cadr:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* call-arguments-limit:                  call-arguments-limit.
                                                              (line   6)
* call-method:                           call-method; make-method.
                                                              (line   6)
* call-next-method:                      call-next-method.    (line   6)
* car:                                   car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* case:                                  case; ccase; ecase.  (line   6)
* case in symbol names:                  Notational Conventions.
                                                              (line 329)
* catch:                                 catch.               (line   6)
* ccase:                                 case; ccase; ecase.  (line   6)
* cdaaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdaadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdaar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdadar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdaddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdadr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdar:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cddaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cddadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cddar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdddar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cddddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdddr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cddr:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* cdr:                                   car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                              (line   6)
* ceiling:                               floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* cell-error:                            cell-error.          (line   6)
* cell-error-name:                       cell-error-name.     (line   6)
* cerror:                                cerror.              (line   6)
* change-class:                          change-class.        (line   6)
* char:                                  char; schar.         (line   6)
* char-bit:                              Removed Operators.   (line   7)
* char-bits:                             Removed Operators.   (line   6)
* char-bits-limit:                       Removed Variables.   (line   6)
* char-code:                             char-code.           (line   6)
* char-code-limit:                       char-code-limit.     (line   6)
* char-control-bit:                      Removed Variables.   (line   7)
* char-downcase:                         char-upcase; char-downcase.
                                                              (line   6)
* char-equal:                            char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-font:                             Removed Operators.   (line   6)
* char-font-limit:                       Removed Variables.   (line   6)
* char-greaterp:                         char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-hyper-bit:                        Removed Variables.   (line   7)
* char-int:                              char-int.            (line   6)
* char-lessp:                            char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-meta-bit:                         Removed Variables.   (line   7)
* char-name:                             char-name.           (line   6)
* char-not-equal:                        char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-not-greaterp:                     char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-not-lessp:                        char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char-super-bit:                        Removed Variables.   (line   7)
* char-upcase:                           char-upcase; char-downcase.
                                                              (line   6)
* char/=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char<:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char<=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char=:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char>:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* char>=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                              (line   6)
* character:                             Sharpsign.           (line  78)
* character <1>:                         Introduction to Characters.
                                                              (line   6)
* character <2>:                         character (System Class).
                                                              (line   6)
* character <3>:                         character (Function).
                                                              (line   6)
* character <4>:                         Introduction to Streams.
                                                              (line   8)
* characterp:                            characterp.          (line   6)
* check-type:                            check-type.          (line   6)
* circular list:                         Conses as Lists.     (line  20)
* circular list <1>:                     list (System Class). (line  20)
* Circumflex (format directive):         FORMAT Miscellaneous Pseudo-Operations.
                                                              (line  15)
* cis:                                   cis.                 (line   6)
* CL:                                    Standardized Packages.
                                                              (line  21)
* CL-USER:                               Standardized Packages.
                                                              (line 155)
* class:                                 Introduction to Classes.
                                                              (line   6)
* class <1>:                             class.               (line   6)
* class precedence list:                 Introduction to Classes.
                                                              (line  30)
* class precedence list <1>:             Determining the Class Precedence List.
                                                              (line   9)
* class-name:                            class-name.          (line   6)
* class-of:                              class-of.            (line   6)
* clear-input:                           clear-input.         (line   6)
* clear-output:                          finish-output; force-output; clear-output.
                                                              (line   6)
* close:                                 close.               (line   6)
* closed:                                Introduction to Streams.
                                                              (line  72)
* clrhash:                               clrhash.             (line   6)
* coalesce:                              Compiler Terminology.
                                                              (line  24)
* code-char:                             code-char.           (line   6)
* code-char <1>:                         Removed Argument Conventions.
                                                              (line   7)
* coerce:                                coerce.              (line   6)
* Colon (sharpsign reader macro):        Sharpsign.           (line 195)
* Comma (reader macro):                  Comma.               (line   6)
* comment:                               Semicolon.           (line   6)
* comment <1>:                           Sharpsign.           (line 471)
* COMMON-LISP:                           Symbols in the COMMON-LISP Package.
                                                              (line   7)
* COMMON-LISP <1>:                       Standardized Packages.
                                                              (line  21)
* COMMON-LISP-USER:                      Standardized Packages.
                                                              (line 155)
* commonp:                               Removed Operators.   (line   7)
* compilation environment:               Compiler Terminology.
                                                              (line  51)
* compilation-speed:                     optimize.            (line   9)
* compile:                               Compilation Semantics.
                                                              (line 158)
* compile <1>:                           compile.             (line   6)
* compile <2>:                           eval-when.           (line  15)
* compile time:                          Compiler Terminology.
                                                              (line  74)
* compile-file:                          Compilation Semantics.
                                                              (line 159)
* compile-file <1>:                      compile-file.        (line   6)
* compile-file-pathname:                 compile-file-pathname.
                                                              (line   6)
* compile-time definition:               Compiler Terminology.
                                                              (line  78)
* compiled code:                         Compiler Terminology.
                                                              (line  13)
* compiled code <1>:                     Loading.             (line   7)
* compiled file:                         Loading.             (line  13)
* compiled-function:                     compiled-function.   (line   6)
* compiled-function-p:                   compiled-function-p. (line   6)
* compiler:                              Compiler Terminology.
                                                              (line   8)
* compiler <1>:                          Compiler Terminology.
                                                              (line  10)
* compiler macro:                        Compilation Semantics.
                                                              (line 146)
* compiler-macro-function:               compiler-macro-function.
                                                              (line   6)
* complement:                            complement.          (line   6)
* complex:                               Sharpsign.           (line 294)
* complex <1>:                           complex (System Class).
                                                              (line   6)
* complex <2>:                           complex (Function).  (line   6)
* complex <3>:                           Default Print-Object Methods.
                                                              (line  71)
* complexp:                              complexp.            (line   6)
* compound type specifier:               Type Specifiers.     (line  54)
* compute-applicable-methods:            compute-applicable-methods.
                                                              (line   6)
* compute-restarts:                      compute-restarts.    (line   6)
* concatenate:                           concatenate.         (line   6)
* concatenated-stream:                   concatenated-stream. (line   6)
* concatenated-stream-streams:           concatenated-stream-streams.
                                                              (line   6)
* cond:                                  cond.                (line   6)
* condition:                             condition.           (line   6)
* condition designator:                  Creating Conditions. (line  17)
* condition reporter:                    Printing Conditions. (line   9)
* conditional newlines:                  Pretty Printer Concepts.
                                                              (line  35)
* conforming code:                       Conforming Programs. (line   6)
* conforming implementation:             Conforming Implementations.
                                                              (line   6)
* conforming program:                    Conforming Programs. (line   6)
* congruence:                            Introduction to Methods.
                                                              (line  50)
* conjugate:                             conjugate.           (line   6)
* cons:                                  Backquote.           (line   6)
* cons <1>:                              Comma.               (line   6)
* cons <2>:                              Cons Concepts.       (line   6)
* cons <3>:                              cons (System Class). (line   6)
* cons <4>:                              cons (Function).     (line   6)
* consequences:                          Error Terminology.   (line  87)
* consequences <1>:                      Error Terminology.   (line  98)
* consp:                                 consp.               (line   6)
* constantly:                            constantly.          (line   6)
* constantp:                             constantp.           (line   6)
* continue:                              continue (Restart).  (line   6)
* continue <1>:                          abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* continue <2>:                          abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* control-error:                         control-error.       (line   6)
* copy-alist:                            copy-alist.          (line   6)
* copy-list:                             copy-list.           (line   6)
* copy-pprint-dispatch:                  copy-pprint-dispatch.
                                                              (line   6)
* copy-readtable:                        copy-readtable.      (line   6)
* copy-seq:                              copy-seq.            (line   6)
* copy-structure:                        copy-structure.      (line   6)
* copy-symbol:                           copy-symbol.         (line   6)
* copy-tree:                             copy-tree.           (line   6)
* cos:                                   sin; cos; tan.       (line   6)
* cosh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* count:                                 count; count-if; count-if-not.
                                                              (line   6)
* count-if:                              count; count-if; count-if-not.
                                                              (line   6)
* count-if-not:                          count; count-if; count-if-not.
                                                              (line   6)
* ctypecase:                             typecase; ctypecase; etypecase.
                                                              (line   6)
* current input base:                    *read-base*.         (line  22)
* current output base:                   *print-base*; *print-radix*.
                                                              (line  21)
* current package:                       Introduction to Packages.
                                                              (line   7)
* current pprint dispatch table:         Pretty Printer Concepts.
                                                              (line 138)
* current readtable:                     Readtables.          (line  25)
* D (format directive):                  FORMAT Radix Control.
                                                              (line  44)
* debug:                                 optimize.            (line   9)
* decf:                                  incf; decf.          (line   6)
* declaim:                               declaim.             (line   6)
* declaration:                           Declarations.        (line   6)
* declaration <1>:                       Minimal Declaration Processing Requirements.
                                                              (line   7)
* declaration <2>:                       declaration.         (line   6)
* declaration identifier:                Declaration Identifiers.
                                                              (line   6)
* declaration specifier:                 Declaration Specifiers.
                                                              (line   6)
* declare:                               declare.             (line   6)
* decode-float:                          decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* decode-universal-time:                 decode-universal-time.
                                                              (line   6)
* decoded time:                          Time.                (line  30)
* default method:                        Introduction to Methods.
                                                              (line 103)
* defclass:                              defclass.            (line   6)
* defconstant:                           defconstant.         (line   6)
* defgeneric:                            defgeneric.          (line   6)
* define-compiler-macro:                 define-compiler-macro.
                                                              (line   6)
* define-condition:                      define-condition.    (line   6)
* define-method-combination:             define-method-combination.
                                                              (line   6)
* define-method-combination arguments lambda list: Define-method-combination Arguments Lambda Lists.
                                                              (line   6)
* define-modify-macro:                   define-modify-macro. (line   6)
* define-modify-macro lambda list:       Define-modify-macro Lambda Lists.
                                                              (line   6)
* define-setf-expander:                  define-setf-expander.
                                                              (line   6)
* define-symbol-macro:                   define-symbol-macro. (line   6)
* defmacro:                              defmacro.            (line   6)
* defmethod:                             defmethod.           (line   6)
* defpackage:                            defpackage.          (line   6)
* defparameter:                          defparameter; defvar.
                                                              (line   6)
* defsetf:                               defsetf.             (line   6)
* defsetf lambda list:                   Defsetf Lambda Lists.
                                                              (line   6)
* defstruct:                             defstruct.           (line   6)
* deftype:                               deftype.             (line   6)
* deftype lambda list:                   Deftype Lambda Lists.
                                                              (line   6)
* defun:                                 defun.               (line   6)
* defvar:                                defparameter; defvar.
                                                              (line   6)
* delete:                                remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* delete-duplicates:                     remove-duplicates; delete-duplicates.
                                                              (line   6)
* delete-file:                           delete-file.         (line   6)
* delete-if:                             remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* delete-if-not:                         remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* delete-package:                        delete-package.      (line   6)
* denominator:                           numerator; denominator.
                                                              (line   6)
* deposit-field:                         deposit-field.       (line   6)
* derived type specifier:                Type Specifiers.     (line 110)
* describe:                              describe.            (line   6)
* describe-object:                       describe-object.     (line   6)
* designator:                            Notational Conventions.
                                                              (line 428)
* destructuring lambda list:             Destructuring Lambda Lists.
                                                              (line   6)
* destructuring-bind:                    destructuring-bind.  (line   6)
* digit-char:                            digit-char.          (line   6)
* digit-char <1>:                        Removed Argument Conventions.
                                                              (line   6)
* digit-char-p:                          digit-char-p.        (line   6)
* dimension:                             Array Elements.      (line  20)
* direct subclass:                       Introduction to Classes.
                                                              (line   4)
* direct superclass:                     Introduction to Classes.
                                                              (line  23)
* directory:                             directory.           (line   6)
* directory-namestring:                  namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                              (line   6)
* disassemble:                           disassemble.         (line   6)
* division-by-zero:                      division-by-zero.    (line   6)
* do:                                    do; do*.             (line   6)
* do*:                                   do; do*.             (line   6)
* do-all-symbols:                        do-symbols; do-external-symbols; do-all-symbols.
                                                              (line   6)
* do-external-symbols:                   do-symbols; do-external-symbols; do-all-symbols.
                                                              (line   6)
* do-symbols:                            do-symbols; do-external-symbols; do-all-symbols.
                                                              (line   6)
* documentation:                         documentation; setf documentation.
                                                              (line   6)
* dolist:                                dolist.              (line   6)
* Dollarsign (format directive):         FORMAT Floating-Point Printers.
                                                              (line 199)
* dot:                                   Left-Parenthesis.    (line  20)
* dot <1>:                               pprint-pop.          (line  28)
* Dot (sharpsign reader macro):          Sharpsign.           (line 208)
* Dot Dot:                               Re-Reading Abbreviated Expressions.
                                                              (line   6)
* Dot Dot <1>:                           *print-lines*.       (line  21)
* Dot Dot Dot:                           Re-Reading Abbreviated Expressions.
                                                              (line   6)
* Dot Dot Dot <1>:                       pprint-pop.          (line  34)
* dotimes:                               dotimes.             (line   6)
* dotted list:                           Conses as Lists.     (line  16)
* dotted list <1>:                       list (System Class). (line  19)
* double-float:                          short-float; single-float; double-float; long-float.
                                                              (line   6)
* double-float-epsilon:                  short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* double-float-negative-epsilon:         short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* Double-Quote (reader macro):           Double-Quote.        (line   6)
* dpb:                                   dpb.                 (line   6)
* dribble:                               dribble.             (line   6)
* dynamic environment:                   Introduction to Environments.
                                                              (line  33)
* dynamic-extent:                        dynamic-extent.      (line   6)
* E (format directive):                  FORMAT Floating-Point Printers.
                                                              (line  82)
* ecase:                                 case; ccase; ecase.  (line   6)
* echo-stream:                           echo-stream.         (line   6)
* echo-stream-input-stream:              echo-stream-input-stream; echo-stream-output-stream.
                                                              (line   6)
* echo-stream-output-stream:             echo-stream-input-stream; echo-stream-output-stream.
                                                              (line   6)
* ed:                                    ed.                  (line   6)
* effective method:                      Method Selection and Combination.
                                                              (line   7)
* eighth:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* elt:                                   elt.                 (line   6)
* empty list:                            list (System Class). (line  18)
* encode-universal-time:                 encode-universal-time.
                                                              (line   6)
* end-of-file:                           end-of-file.         (line   6)
* endp:                                  endp.                (line   6)
* enough-namestring:                     namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                              (line   6)
* ensure-directories-exist:              ensure-directories-exist.
                                                              (line   6)
* ensure-generic-function:               ensure-generic-function.
                                                              (line   6)
* environment:                           Introduction to Environments.
                                                              (line  10)
* environment object:                    Introduction to Environments.
                                                              (line  92)
* eq:                                    eq.                  (line   6)
* eql:                                   eql (Type Specifier).
                                                              (line   6)
* eql <1>:                               eql (Function).      (line   6)
* equal:                                 equal.               (line   6)
* Equal-Sign (sharpsign reader macro):   Sharpsign.           (line 397)
* equalp:                                equalp.              (line   6)
* error:                                 error (Condition Type).
                                                              (line   6)
* error <1>:                             error (Function).    (line   6)
* etypecase:                             typecase; ctypecase; etypecase.
                                                              (line   6)
* eval:                                  Sharpsign.           (line 208)
* eval <1>:                              eval.                (line   6)
* eval <2>:                              eval-when.           (line  15)
* eval-when:                             File Compilation.    (line  67)
* eval-when <1>:                         eval-when.           (line   6)
* evaluation:                            Evaluation.          (line  10)
* evaluation environment:                Compiler Terminology.
                                                              (line  60)
* evaluation order:                      load-time-value.     (line  42)
* evaluation order <1>:                  Overview of Places and Generalized Reference.
                                                              (line  56)
* evaluation order <2>:                  Overview of Places and Generalized Reference.
                                                              (line  97)
* evaluation order <3>:                  catch.               (line  29)
* evaluation order <4>:                  multiple-value-setq. (line  41)
* evaluation order <5>:                  Variable Initialization and Stepping Clauses.
                                                              (line  79)
* evaluation order <6>:                  Defaulting of Initialization Arguments.
                                                              (line  51)
* evaluation order <7>:                  assert.              (line  45)
* evaluation order <8>:                  ldb.                 (line  39)
* evenp:                                 evenp; oddp.         (line   6)
* every:                                 every; some; notevery; notany.
                                                              (line   6)
* exp:                                   exp; expt.           (line   6)
* export:                                export.              (line   6)
* expressed array element type:          Specialized Arrays.  (line  37)
* expt:                                  exp; expt.           (line   6)
* extended-char:                         extended-char.       (line   6)
* extensions:                            Error Terminology.   (line 132)
* extensions <1>:                        Error Terminology.   (line 148)
* external symbol:                       Introduction to Packages.
                                                              (line  56)
* externalizable object:                 Literal Objects in Compiled Files.
                                                              (line  35)
* externalizable object <1>:             Literal Objects in Compiled Files.
                                                              (line  49)
* F (format directive):                  FORMAT Floating-Point Printers.
                                                              (line   9)
* fboundp:                               fboundp.             (line   6)
* fceiling:                              floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* fdefinition:                           fdefinition.         (line   6)
* feature:                               Features.            (line   6)
* feature expression:                    Features.            (line  17)
* features list:                         Features.            (line  12)
* ffloor:                                floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* fifth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* file:                                  File System Concepts.
                                                              (line   7)
* file stream:                           Introduction to Streams.
                                                              (line 126)
* file-author:                           file-author.         (line   6)
* file-error:                            file-error.          (line   6)
* file-error-pathname:                   file-error-pathname. (line   6)
* file-length:                           file-length.         (line   6)
* file-namestring:                       namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                              (line   6)
* file-position:                         file-position.       (line   6)
* file-stream:                           file-stream.         (line   6)
* file-string-length:                    file-string-length.  (line   6)
* file-write-date:                       file-write-date.     (line   6)
* filename:                              File System Concepts.
                                                              (line   7)
* fill:                                  fill.                (line   6)
* fill pointer:                          Array Elements.      (line  54)
* fill-pointer:                          fill-pointer.        (line   6)
* fill-style conditional newline:        Examples of using the Pretty Printer.
                                                              (line  84)
* fill-style conditional newline <1>:    pprint-newline.      (line  50)
* find:                                  find; find-if; find-if-not.
                                                              (line   6)
* find-all-symbols:                      find-all-symbols.    (line   6)
* find-class:                            find-class.          (line   6)
* find-if:                               find; find-if; find-if-not.
                                                              (line   6)
* find-if-not:                           find; find-if; find-if-not.
                                                              (line   6)
* find-method:                           find-method.         (line   6)
* find-package:                          find-package.        (line   6)
* find-restart:                          find-restart.        (line   6)
* find-symbol:                           find-symbol.         (line   6)
* finish-output:                         finish-output; force-output; clear-output.
                                                              (line   6)
* first:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* fixnum:                                fixnum.              (line   6)
* flet:                                  flet; labels; macrolet.
                                                              (line   6)
* float:                                 float (System Class).
                                                              (line   6)
* float <1>:                             float (Function).    (line   6)
* float <2>:                             Default Print-Object Methods.
                                                              (line  43)
* float-digits:                          decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* float-precision:                       decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* float-radix:                           decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* float-sign:                            decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* floating-point-inexact:                floating-point-inexact.
                                                              (line   6)
* floating-point-invalid-operation:      floating-point-invalid-operation.
                                                              (line   6)
* floating-point-overflow:               floating-point-overflow.
                                                              (line   6)
* floating-point-underflow:              floating-point-underflow.
                                                              (line   6)
* floatp:                                floatp.              (line   6)
* floor:                                 floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* fmakunbound:                           fmakunbound.         (line   6)
* force-output:                          finish-output; force-output; clear-output.
                                                              (line   6)
* format:                                format.              (line   6)
* format control:                        Pretty Printer Concepts.
                                                              (line 125)
* formatter:                             formatter.           (line   6)
* fourth:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* free declaration:                      Declaration Scope.   (line  15)
* fresh-line:                            terpri; fresh-line.  (line   6)
* fround:                                floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* ftruncate:                             floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* ftype:                                 ftype.               (line   6)
* funcall:                               funcall.             (line   6)
* function:                              Sharpsign.           (line 103)
* function <1>:                          function (System Class).
                                                              (line   6)
* function <2>:                          function (Special Operator).
                                                              (line   6)
* function-keywords:                     function-keywords.   (line   6)
* function-lambda-expression:            function-lambda-expression.
                                                              (line   6)
* functionp:                             functionp.           (line   6)
* further compilation:                   Compiler Terminology.
                                                              (line  38)
* G (format directive):                  FORMAT Floating-Point Printers.
                                                              (line 171)
* gcd:                                   gcd.                 (line   6)
* generalized reference:                 Overview of Places and Generalized Reference.
                                                              (line   6)
* generic function:                      generic-function.    (line  14)
* generic function <1>:                  Introduction to Generic Functions.
                                                              (line   6)
* generic function lambda list:          Generic Function Lambda Lists.
                                                              (line   6)
* generic-function:                      generic-function.    (line   6)
* gensym:                                gensym.              (line   6)
* gentemp:                               gentemp.             (line   6)
* get:                                   get.                 (line   6)
* get-decoded-time:                      get-universal-time; get-decoded-time.
                                                              (line   6)
* get-dispatch-macro-character:          set-dispatch-macro-character; get-dispatch-macro-character.
                                                              (line   6)
* get-internal-real-time:                get-internal-real-time.
                                                              (line   6)
* get-internal-run-time:                 get-internal-run-time.
                                                              (line   6)
* get-macro-character:                   set-macro-character; get-macro-character.
                                                              (line   6)
* get-output-stream-string:              get-output-stream-string.
                                                              (line   6)
* get-properties:                        get-properties.      (line   6)
* get-setf-expansion:                    get-setf-expansion.  (line   6)
* get-universal-time:                    get-universal-time; get-decoded-time.
                                                              (line   6)
* getf:                                  getf.                (line   6)
* gethash:                               gethash.             (line   6)
* global declaration:                    Declarations.        (line   9)
* global environment:                    Introduction to Environments.
                                                              (line  20)
* go:                                    go.                  (line   6)
* graphic:                               Character Categories.
                                                              (line  23)
* graphic-char-p:                        graphic-char-p.      (line   6)
* Greater-Than-Sign (format directive):  FORMAT Layout Control.
                                                              (line 115)
* handler-bind:                          handler-bind.        (line   6)
* handler-case:                          handler-case.        (line   6)
* hash-table:                            hash-table.          (line   6)
* hash-table-count:                      hash-table-count.    (line   6)
* hash-table-p:                          hash-table-p.        (line   6)
* hash-table-rehash-size:                hash-table-rehash-size.
                                                              (line   6)
* hash-table-rehash-threshold:           hash-table-rehash-threshold.
                                                              (line   6)
* hash-table-size:                       hash-table-size.     (line   6)
* hash-table-test:                       hash-table-test.     (line   6)
* host-namestring:                       namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                              (line   6)
* I (format directive):                  FORMAT Pretty Printer Operations.
                                                              (line  87)
* identity:                              identity.            (line   6)
* if:                                    if.                  (line   6)
* ignorable:                             ignore; ignorable.   (line   6)
* ignore:                                ignore; ignorable.   (line   6)
* ignore-errors:                         ignore-errors.       (line   6)
* imagpart:                              realpart; imagpart.  (line   6)
* implicit compilation:                  Compiler Terminology.
                                                              (line  17)
* import:                                import.              (line   6)
* improper list:                         Conses as Lists.     (line  13)
* in-package:                            in-package.          (line   6)
* incf:                                  incf; decf.          (line   6)
* initial readtable:                     Readtables.          (line  45)
* initialization argument list:          Object Creation and Initialization.
                                                              (line   8)
* initialize-instance:                   initialize-instance (Standard Generic Function).
                                                              (line   6)
* inline:                                inline; notinline.   (line   6)
* input:                                 Introduction to Streams.
                                                              (line  32)
* input-stream-p:                        input-stream-p; output-stream-p.
                                                              (line   6)
* inspect:                               inspect.             (line   6)
* instance:                              Introduction to Classes.
                                                              (line   7)
* int-char:                              Removed Operators.   (line   6)
* integer:                               integer.             (line   6)
* integer-decode-float:                  decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* integer-length:                        integer-length.      (line   6)
* integerp:                              integerp.            (line   6)
* interactive stream:                    Introduction to Streams.
                                                              (line  93)
* interactive-stream-p:                  interactive-stream-p.
                                                              (line   6)
* intern:                                intern.              (line   6)
* internal symbol:                       Introduction to Packages.
                                                              (line  54)
* internal time:                         Time.                (line 111)
* internal-time-units-per-second:        internal-time-units-per-second.
                                                              (line   6)
* intersection:                          intersection; nintersection.
                                                              (line   6)
* invalid-method-error:                  invalid-method-error.
                                                              (line   6)
* invoke-debugger:                       invoke-debugger.     (line   6)
* invoke-restart:                        invoke-restart.      (line   6)
* invoke-restart-interactively:          invoke-restart-interactively.
                                                              (line   6)
* is signaled:                           Error Terminology.   (line  29)
* isqrt:                                 sqrt; isqrt.         (line   6)
* keyword:                               keyword.             (line   6)
* KEYWORD:                               Standardized Packages.
                                                              (line 165)
* keywordp:                              keywordp.            (line   6)
* labels:                                flet; labels; macrolet.
                                                              (line   6)
* lambda:                                lambda (Symbol).     (line   6)
* lambda <1>:                            lambda (Macro).      (line   6)
* lambda list:                           Lambda Lists.        (line   6)
* lambda-list-keywords:                  lambda-list-keywords.
                                                              (line   6)
* lambda-parameters-limit:               lambda-parameters-limit.
                                                              (line   6)
* last:                                  last.                (line   6)
* lcm:                                   lcm.                 (line   6)
* ldb:                                   ldb.                 (line   6)
* ldb-test:                              ldb-test.            (line   6)
* ldiff:                                 ldiff; tailp.        (line   6)
* least-negative-double-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-long-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-normalized-double-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-normalized-long-float:  most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-normalized-short-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-normalized-single-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-short-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-negative-single-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-double-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-long-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-normalized-double-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-normalized-long-float:  most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-normalized-short-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-normalized-single-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-short-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* least-positive-single-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* leaves:                                Conses as Trees.     (line   8)
* Left-Brace (format directive):         FORMAT Control-Flow Operations.
                                                              (line  89)
* Left-Bracket (format directive):       FORMAT Control-Flow Operations.
                                                              (line  27)
* Left-Paren (format directive):         FORMAT Miscellaneous Operations.
                                                              (line   9)
* Left-Parenthesis (reader macro):       Left-Parenthesis.    (line   6)
* Left-Parenthesis (sharpsign reader macro): Sharpsign.       (line 113)
* length:                                length.              (line   6)
* Less-Than-Sign (format directive):     FORMAT Pretty Printer Operations.
                                                              (line  19)
* Less-Than-Sign (format directive) <1>: FORMAT Layout Control.
                                                              (line  47)
* Less-Than-Sign (sharpsign reader macro): Sharpsign.         (line 557)
* let:                                   let; let*.           (line   6)
* let*:                                  let; let*.           (line   6)
* lexical environment:                   Introduction to Environments.
                                                              (line  57)
* linear-style conditional newline:      Examples of using the Pretty Printer.
                                                              (line  33)
* linear-style conditional newline <1>:  pprint-newline.      (line  30)
* LISP:                                  Packages No Longer Required.
                                                              (line   6)
* lisp-implementation-type:              lisp-implementation-type; lisp-implementation-version.
                                                              (line   6)
* lisp-implementation-version:           lisp-implementation-type; lisp-implementation-version.
                                                              (line   6)
* list:                                  Left-Parenthesis.    (line   6)
* list <1>:                              Backquote.           (line   6)
* list <2>:                              Comma.               (line   6)
* list <3>:                              Method Selection and Combination.
                                                              (line 234)
* list <4>:                              Conses as Lists.     (line   6)
* list <5>:                              list (System Class). (line   6)
* list <6>:                              list (System Class). (line  14)
* list <7>:                              list; list*.         (line   6)
* list*:                                 list; list*.         (line   6)
* list-all-packages:                     list-all-packages.   (line   6)
* list-length:                           list-length.         (line   6)
* listen:                                listen.              (line   6)
* listp:                                 listp.               (line   6)
* literal object:                        Compiler Terminology.
                                                              (line  20)
* load:                                  eval-when.           (line  15)
* load <1>:                              load.                (line   6)
* load-logical-pathname-translations:    load-logical-pathname-translations.
                                                              (line   6)
* load-time-value:                       Compilation Semantics.
                                                              (line 157)
* load-time-value <1>:                   load-time-value.     (line   6)
* local declaration:                     Declarations.        (line   9)
* local precedence order:                Introduction to Classes.
                                                              (line  39)
* local precedence order <1>:            Determining the Class Precedence List.
                                                              (line   7)
* locally:                               locally.             (line   6)
* log:                                   log.                 (line   6)
* logand:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logandc1:                              logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logandc2:                              logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logbitp:                               logbitp.             (line   6)
* logcount:                              logcount.            (line   6)
* logeqv:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logical blocks:                        Pretty Printer Concepts.
                                                              (line  35)
* logical-pathname:                      logical-pathname (System Class).
                                                              (line   6)
* logical-pathname <1>:                  logical-pathname (Function).
                                                              (line   6)
* logical-pathname-translations:         logical-pathname-translations.
                                                              (line   6)
* logior:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* lognand:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* lognor:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* lognot:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logorc1:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logorc2:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* logtest:                               logtest.             (line   6)
* logxor:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                              (line   6)
* long-float:                            short-float; single-float; double-float; long-float.
                                                              (line   6)
* long-float-epsilon:                    short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* long-float-negative-epsilon:           short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* long-site-name:                        short-site-name; long-site-name.
                                                              (line   6)
* loop:                                  loop.                (line   6)
* loop-finish:                           loop-finish.         (line   6)
* lower-case-p:                          upper-case-p; lower-case-p; both-case-p.
                                                              (line   6)
* machine-instance:                      machine-instance.    (line   6)
* machine-type:                          machine-type.        (line   6)
* machine-version:                       machine-version.     (line   6)
* macro:                                 Compilation Semantics.
                                                              (line 150)
* macro lambda list:                     Macro Lambda Lists.  (line   6)
* macro-function:                        macro-function.      (line   6)
* macroexpand:                           macroexpand; macroexpand-1.
                                                              (line   6)
* macroexpand-1:                         macroexpand; macroexpand-1.
                                                              (line   6)
* macrolet:                              Compilation Semantics.
                                                              (line 152)
* macrolet <1>:                          flet; labels; macrolet.
                                                              (line   6)
* make-array:                            make-array.          (line   6)
* make-broadcast-stream:                 make-broadcast-stream.
                                                              (line   6)
* make-char:                             Removed Operators.   (line   6)
* make-concatenated-stream:              make-concatenated-stream.
                                                              (line   6)
* make-condition:                        make-condition.      (line   6)
* make-dispatch-macro-character:         make-dispatch-macro-character.
                                                              (line   6)
* make-echo-stream:                      make-echo-stream.    (line   6)
* make-hash-table:                       make-hash-table.     (line   6)
* make-instance:                         make-instance.       (line   6)
* make-instances-obsolete:               make-instances-obsolete.
                                                              (line   6)
* make-list:                             make-list.           (line   6)
* make-load-form:                        make-load-form.      (line   6)
* make-load-form-saving-slots:           make-load-form-saving-slots.
                                                              (line   6)
* make-method:                           call-method; make-method.
                                                              (line   6)
* make-package:                          make-package.        (line   6)
* make-pathname:                         make-pathname.       (line   6)
* make-random-state:                     make-random-state.   (line   6)
* make-sequence:                         make-sequence.       (line   6)
* make-string:                           make-string.         (line   6)
* make-string-input-stream:              make-string-input-stream.
                                                              (line   6)
* make-string-output-stream:             make-string-output-stream.
                                                              (line   6)
* make-symbol:                           make-symbol.         (line   6)
* make-synonym-stream:                   make-synonym-stream. (line   6)
* make-two-way-stream:                   make-two-way-stream. (line   6)
* makunbound:                            makunbound.          (line   6)
* mandatory-style conditional newline:   pprint-newline.      (line  64)
* map:                                   map.                 (line   6)
* map-into:                              map-into.            (line   6)
* mapc:                                  mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* mapcan:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* mapcar:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* mapcon:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* maphash:                               maphash.             (line   6)
* mapl:                                  mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* maplist:                               mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                              (line   6)
* mask-field:                            mask-field.          (line   6)
* max:                                   Method Selection and Combination.
                                                              (line 234)
* max <1>:                               max; min.            (line   6)
* member:                                member (Type Specifier).
                                                              (line   6)
* member <1>:                            member; member-if; member-if-not.
                                                              (line   6)
* member-if:                             member; member-if; member-if-not.
                                                              (line   6)
* member-if-not:                         member; member-if; member-if-not.
                                                              (line   6)
* merge:                                 merge.               (line   6)
* merge-pathnames:                       merge-pathnames.     (line   6)
* metaclass:                             Introduction to Types and Classes.
                                                              (line  45)
* metaclass <1>:                         Introduction to Classes.
                                                              (line  67)
* method:                                method.              (line   6)
* method-combination:                    method-combination.  (line   6)
* method-combination-error:              method-combination-error.
                                                              (line   6)
* method-defining operator:              Introduction to Generic Functions.
                                                              (line  59)
* method-qualifiers:                     method-qualifiers.   (line   6)
* might signal:                          Error Terminology.   (line 113)
* min:                                   Method Selection and Combination.
                                                              (line 234)
* min <1>:                               max; min.            (line   6)
* minimal compilation:                   Compiler Terminology.
                                                              (line  30)
* Minus (sharpsign reader macro):        Sharpsign.           (line 460)
* minusp:                                minusp; plusp.       (line   6)
* miser-style conditional newline:       Examples of using the Pretty Printer.
                                                              (line  52)
* miser-style conditional newline <1>:   pprint-newline.      (line  38)
* mismatch:                              mismatch.            (line   6)
* mod:                                   mod (Type Specifier).
                                                              (line   6)
* mod <1>:                               mod; rem.            (line   6)
* most-negative-double-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-negative-fixnum:                  most-positive-fixnum; most-negative-fixnum.
                                                              (line   6)
* most-negative-long-float:              most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-negative-short-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-negative-single-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-positive-double-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-positive-fixnum:                  most-positive-fixnum; most-negative-fixnum.
                                                              (line   6)
* most-positive-long-float:              most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-positive-short-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* most-positive-single-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                              (line   6)
* muffle-warning:                        muffle-warning (Restart).
                                                              (line   6)
* muffle-warning <1>:                    abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* muffle-warning <2>:                    abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* multiple escape:                       Character Syntax Types.
                                                              (line 233)
* multiple-value-bind:                   multiple-value-bind. (line   6)
* multiple-value-call:                   multiple-value-call. (line   6)
* multiple-value-list:                   multiple-value-list. (line   6)
* multiple-value-prog1:                  multiple-value-prog1.
                                                              (line   6)
* multiple-value-setq:                   multiple-value-setq. (line   6)
* multiple-values-limit:                 multiple-values-limit.
                                                              (line   6)
* must signal:                           Error Terminology.   (line  29)
* name:                                  Notational Conventions.
                                                              (line  26)
* name-char:                             name-char.           (line   6)
* namespace:                             Introduction to Environments.
                                                              (line  13)
* namestring:                            Namestrings as Filenames.
                                                              (line   6)
* namestring <1>:                        namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                              (line   6)
* nbutlast:                              butlast; nbutlast.   (line   6)
* nconc:                                 Method Selection and Combination.
                                                              (line 234)
* nconc <1>:                             nconc.               (line   6)
* Newline (format directive):            FORMAT Miscellaneous Pseudo-Operations.
                                                              (line  82)
* next method:                           Method Selection and Combination.
                                                              (line  86)
* next-method-p:                         next-method-p.       (line   6)
* nil:                                   Notational Conventions.
                                                              (line 385)
* nil <1>:                               Notational Conventions.
                                                              (line 385)
* nil <2>:                               nil (Type).          (line   6)
* nil <3>:                               nil (Constant Variable).
                                                              (line   6)
* nintersection:                         intersection; nintersection.
                                                              (line   6)
* ninth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* no-applicable-method:                  no-applicable-method.
                                                              (line   6)
* no-next-method:                        no-next-method.      (line   6)
* non-graphic:                           Character Categories.
                                                              (line  34)
* non-terminating:                       Character Syntax Types.
                                                              (line 204)
* not:                                   not (Type Specifier).
                                                              (line   6)
* not <1>:                               not (Function).      (line   6)
* notany:                                every; some; notevery; notany.
                                                              (line   6)
* notevery:                              every; some; notevery; notany.
                                                              (line   6)
* notinline:                             Minimal Declaration Processing Requirements.
                                                              (line   7)
* notinline <1>:                         inline; notinline.   (line   6)
* nreconc:                               revappend; nreconc.  (line   6)
* nreverse:                              reverse; nreverse.   (line   6)
* nset-difference:                       set-difference; nset-difference.
                                                              (line   6)
* nset-exclusive-or:                     set-exclusive-or; nset-exclusive-or.
                                                              (line   6)
* nstring-capitalize:                    string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* nstring-downcase:                      string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* nstring-upcase:                        string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* nsublis:                               sublis; nsublis.     (line   6)
* nsubst:                                subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* nsubst-if:                             subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* nsubst-if-not:                         subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* nsubstitute:                           substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* nsubstitute-if:                        substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* nsubstitute-if-not:                    substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* nth:                                   nth.                 (line   6)
* nth-value:                             nth-value.           (line   6)
* nthcdr:                                nthcdr.              (line   6)
* null:                                  Character Attributes.
                                                              (line  16)
* null <1>:                              null (System Class). (line   6)
* null <2>:                              null (Function).     (line   6)
* null lexical environment:              Introduction to Environments.
                                                              (line  82)
* number:                                number.              (line   6)
* numberp:                               numberp.             (line   6)
* numerator:                             numerator; denominator.
                                                              (line   6)
* nunion:                                union; nunion.       (line   6)
* O (format directive):                  FORMAT Radix Control.
                                                              (line  83)
* O (sharpsign reader macro):            Sharpsign.           (line 233)
* oddp:                                  evenp; oddp.         (line   6)
* open:                                  Introduction to Streams.
                                                              (line  72)
* open <1>:                              open.                (line   6)
* open-stream-p:                         open-stream-p.       (line   6)
* optimize:                              optimize.            (line   6)
* or:                                    or (Type Specifier). (line   6)
* or <1>:                                or (Macro).          (line   6)
* or <2>:                                Method Selection and Combination.
                                                              (line 234)
* order of evaluation:                   load-time-value.     (line  42)
* order of evaluation <1>:               Overview of Places and Generalized Reference.
                                                              (line  56)
* order of evaluation <2>:               Overview of Places and Generalized Reference.
                                                              (line  97)
* order of evaluation <3>:               catch.               (line  29)
* order of evaluation <4>:               multiple-value-setq. (line  41)
* order of evaluation <5>:               Variable Initialization and Stepping Clauses.
                                                              (line  79)
* order of evaluation <6>:               Defaulting of Initialization Arguments.
                                                              (line  51)
* order of evaluation <7>:               assert.              (line  45)
* order of evaluation <8>:               ldb.                 (line  39)
* ordinary lambda list:                  Ordinary Lambda Lists.
                                                              (line   6)
* otherwise:                             case; ccase; ecase.  (line  20)
* otherwise <1>:                         typecase; ctypecase; etypecase.
                                                              (line  20)
* output:                                Introduction to Streams.
                                                              (line  33)
* output-stream-p:                       input-stream-p; output-stream-p.
                                                              (line   6)
* P (format directive):                  FORMAT Miscellaneous Operations.
                                                              (line  50)
* P (sharpsign reader macro):            Sharpsign.           (line 386)
* package:                               Introduction to Packages.
                                                              (line   6)
* package <1>:                           package.             (line   6)
* package-error:                         package-error.       (line   6)
* package-error-package:                 package-error-package.
                                                              (line   6)
* package-name:                          package-name.        (line   6)
* package-nicknames:                     package-nicknames.   (line   6)
* package-shadowing-symbols:             package-shadowing-symbols.
                                                              (line   6)
* package-use-list:                      package-use-list.    (line   6)
* package-used-by-list:                  package-used-by-list.
                                                              (line   6)
* packagep:                              packagep.            (line   6)
* pairlis:                               pairlis.             (line   6)
* parse-error:                           parse-error.         (line   6)
* parse-integer:                         parse-integer.       (line   6)
* parse-namestring:                      parse-namestring.    (line   6)
* pathname:                              Sharpsign.           (line 386)
* pathname <1>:                          Pathnames as Filenames.
                                                              (line   6)
* pathname <2>:                          pathname (System Class).
                                                              (line   6)
* pathname <3>:                          pathname (Function). (line   6)
* pathname-device:                       pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathname-directory:                    pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathname-host:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathname-match-p:                      pathname-match-p.    (line   6)
* pathname-name:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathname-type:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathname-version:                      pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                              (line   6)
* pathnamep:                             pathnamep.           (line   6)
* peek-char:                             peek-char.           (line   6)
* Percent (format directive):            FORMAT Basic Output. (line  52)
* phase:                                 phase.               (line   6)
* pi:                                    pi.                  (line   6)
* place:                                 Overview of Places and Generalized Reference.
                                                              (line   6)
* Plus (sharpsign reader macro):         Sharpsign.           (line 437)
* plusp:                                 minusp; plusp.       (line   6)
* pop:                                   pop.                 (line   6)
* position:                              position; position-if; position-if-not.
                                                              (line   6)
* position-if:                           position; position-if; position-if-not.
                                                              (line   6)
* position-if-not:                       position; position-if; position-if-not.
                                                              (line   6)
* pprint:                                write; prin1; print; pprint; princ.
                                                              (line   6)
* pprint dispatch table:                 Pretty Printer Concepts.
                                                              (line 131)
* pprint-dispatch:                       pprint-dispatch.     (line   6)
* pprint-exit-if-list-exhausted:         pprint-exit-if-list-exhausted.
                                                              (line   6)
* pprint-fill:                           pprint-fill; pprint-linear; pprint-tabular.
                                                              (line   6)
* pprint-indent:                         pprint-indent.       (line   6)
* pprint-linear:                         pprint-fill; pprint-linear; pprint-tabular.
                                                              (line   6)
* pprint-logical-block:                  pprint-logical-block.
                                                              (line   6)
* pprint-newline:                        pprint-newline.      (line   6)
* pprint-pop:                            pprint-pop.          (line   6)
* pprint-tab:                            pprint-tab.          (line   6)
* pprint-tabular:                        pprint-fill; pprint-linear; pprint-tabular.
                                                              (line   6)
* prepared to signal:                    Error Terminology.   (line  50)
* present:                               Introduction to Packages.
                                                              (line  73)
* present <1>:                           Features.            (line  10)
* pretty printer:                        Pretty Printer Concepts.
                                                              (line   6)
* prin1:                                 write; prin1; print; pprint; princ.
                                                              (line   6)
* prin1-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                              (line   6)
* princ:                                 write; prin1; print; pprint; princ.
                                                              (line   6)
* princ-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                              (line   6)
* print:                                 write; prin1; print; pprint; princ.
                                                              (line   6)
* print-not-readable:                    print-not-readable.  (line   6)
* print-not-readable-object:             print-not-readable-object.
                                                              (line   6)
* print-object:                          print-object.        (line   6)
* print-unreadable-object:               print-unreadable-object.
                                                              (line   6)
* printer control variable:              Overview of The Lisp Printer.
                                                              (line  41)
* printer escaping:                      Overview of The Lisp Printer.
                                                              (line  76)
* printer escaping <1>:                  P.                   (line 183)
* probe-file:                            probe-file.          (line   6)
* process:                               Compiler Terminology.
                                                              (line  34)
* proclaim:                              proclaim.            (line   6)
* proclamation:                          Declarations.        (line  10)
* prog:                                  prog; prog*.         (line   6)
* prog*:                                 prog; prog*.         (line   6)
* prog1:                                 prog1; prog2.        (line   6)
* prog2:                                 prog1; prog2.        (line   6)
* progn:                                 progn.               (line   6)
* progn <1>:                             Method Selection and Combination.
                                                              (line 234)
* program-error:                         program-error.       (line   6)
* progv:                                 progv.               (line   6)
* proper list:                           Conses as Lists.     (line  10)
* proper list <1>:                       list (System Class). (line  18)
* provide:                               provide; require.    (line   6)
* psetf:                                 setf; psetf.         (line   6)
* psetq:                                 psetq.               (line   6)
* push:                                  push.                (line   6)
* pushnew:                               pushnew.             (line   6)
* Question-Mark (format directive):      FORMAT Control-Flow Operations.
                                                              (line 167)
* quotation (of forms):                  Single-Quote.        (line   6)
* quotation (of forms) <1>:              Backquote.           (line   6)
* quotation (of forms) <2>:              Comma.               (line   6)
* quotation (of strings):                Double-Quote.        (line   6)
* quote:                                 Single-Quote.        (line   6)
* quote <1>:                             Backquote.           (line   6)
* quote <2>:                             Comma.               (line   6)
* quote <3>:                             quote.               (line   6)
* R (format directive):                  FORMAT Radix Control.
                                                              (line   9)
* R (sharpsign reader macro):            Sharpsign.           (line 259)
* random:                                random.              (line   6)
* random-state:                          random-state.        (line   6)
* random-state-p:                        random-state-p.      (line   6)
* rank:                                  Array Elements.      (line  39)
* rassoc:                                rassoc; rassoc-if; rassoc-if-not.
                                                              (line   6)
* rassoc-if:                             rassoc; rassoc-if; rassoc-if-not.
                                                              (line   6)
* rassoc-if-not:                         rassoc; rassoc-if; rassoc-if-not.
                                                              (line   6)
* ratio:                                 ratio.               (line   6)
* ratio <1>:                             Default Print-Object Methods.
                                                              (line  29)
* rational:                              rational (System Class).
                                                              (line   6)
* rational <1>:                          rational; rationalize.
                                                              (line   6)
* rationalize:                           rational; rationalize.
                                                              (line   6)
* rationalp:                             rationalp.           (line   6)
* read:                                  read; read-preserving-whitespace.
                                                              (line   6)
* read-byte:                             read-byte.           (line   6)
* read-char:                             read-char.           (line   6)
* read-char-no-hang:                     read-char-no-hang.   (line   6)
* read-delimited-list:                   read-delimited-list. (line   6)
* read-from-string:                      read-from-string.    (line   6)
* read-line:                             read-line.           (line   6)
* read-preserving-whitespace:            read; read-preserving-whitespace.
                                                              (line   6)
* read-sequence:                         read-sequence.       (line   6)
* reader macro function:                 Character Syntax Types.
                                                              (line 187)
* reader-error:                          reader-error.        (line   6)
* readtable:                             Readtables.          (line   7)
* readtable <1>:                         readtable.           (line   6)
* readtable-case:                        readtable-case.      (line   6)
* readtablep:                            readtablep.          (line   6)
* real:                                  real.                (line   6)
* realp:                                 realp.               (line   6)
* realpart:                              realpart; imagpart.  (line   6)
* redefinition:                          Standardized Packages.
                                                              (line  69)
* reduce:                                reduce.              (line   6)
* reinitialize-instance:                 reinitialize-instance.
                                                              (line   6)
* rem:                                   mod; rem.            (line   6)
* remf:                                  remf.                (line   6)
* remhash:                               remhash.             (line   6)
* remove:                                remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* remove-duplicates:                     remove-duplicates; delete-duplicates.
                                                              (line   6)
* remove-if:                             remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* remove-if-not:                         remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                              (line   6)
* remove-method:                         remove-method.       (line   6)
* remprop:                               remprop.             (line   6)
* rename-file:                           rename-file.         (line   6)
* rename-package:                        rename-package.      (line   6)
* repertoire:                            Introduction to Scripts and Repertoires.
                                                              (line  30)
* replace:                               replace.             (line   6)
* report message:                        Printing Conditions. (line   9)
* require:                               provide; require.    (line   6)
* rest:                                  rest.                (line   6)
* restart:                               restart.             (line   6)
* restart-bind:                          restart-bind.        (line   6)
* restart-case:                          restart-case.        (line   6)
* restart-name:                          restart-name.        (line   6)
* return:                                return.              (line   6)
* return-from:                           return-from.         (line   6)
* revappend:                             revappend; nreconc.  (line   6)
* reverse:                               reverse; nreverse.   (line   6)
* Right-Brace (format directive):        FORMAT Control-Flow Operations.
                                                              (line 161)
* Right-Bracket (format directive):      FORMAT Control-Flow Operations.
                                                              (line  83)
* Right-Paren (format directive):        FORMAT Miscellaneous Operations.
                                                              (line  44)
* Right-Parenthesis (reader macro):      Right-Parenthesis.   (line   6)
* room:                                  room.                (line   6)
* rotatef:                               rotatef.             (line   6)
* round:                                 floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* row-major-aref:                        row-major-aref.      (line   6)
* rplaca:                                rplaca; rplacd.      (line   6)
* rplacd:                                rplaca; rplacd.      (line   6)
* run time:                              Compiler Terminology.
                                                              (line  84)
* run-time compiler:                     Compiler Terminology.
                                                              (line  91)
* run-time definition:                   Compiler Terminology.
                                                              (line  88)
* run-time environment:                  Compiler Terminology.
                                                              (line  65)
* S (format directive):                  FORMAT Printer Operations.
                                                              (line  32)
* S (sharpsign reader macro):            Sharpsign.           (line 359)
* safe:                                  Error Terminology.   (line  12)
* safe call:                             Argument Mismatch Detection.
                                                              (line   9)
* safety:                                Minimal Declaration Processing Requirements.
                                                              (line   7)
* safety <1>:                            optimize.            (line   9)
* satisfies:                             satisfies.           (line   6)
* satisfy the test:                      Satisfying a Two-Argument Test.
                                                              (line  35)
* satisfy the test <1>:                  Satisfying a Two-Argument Test.
                                                              (line  39)
* satisfy the test <2>:                  Satisfying a One-Argument Test.
                                                              (line   4)
* satisfy the test <3>:                  Satisfying a One-Argument Test.
                                                              (line   4)
* sbit:                                  bit; sbit.           (line   6)
* scale-float:                           decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                              (line   6)
* schar:                                 char; schar.         (line   6)
* search:                                search.              (line   6)
* second:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* sections:                              Pretty Printer Concepts.
                                                              (line  36)
* Semicolon (format directive):          FORMAT Miscellaneous Pseudo-Operations.
                                                              (line   9)
* Semicolon (reader macro):              Semicolon.           (line   6)
* sequence:                              Sequence Concepts.   (line   6)
* sequence <1>:                          sequence.            (line   6)
* sequence function:                     Sequence Concepts.   (line  13)
* serious-condition:                     serious-condition.   (line   6)
* set:                                   set.                 (line   6)
* set-char-bit:                          Removed Operators.   (line   7)
* set-difference:                        set-difference; nset-difference.
                                                              (line   6)
* set-dispatch-macro-character:          set-dispatch-macro-character; get-dispatch-macro-character.
                                                              (line   6)
* set-exclusive-or:                      set-exclusive-or; nset-exclusive-or.
                                                              (line   6)
* set-macro-character:                   set-macro-character; get-macro-character.
                                                              (line   6)
* set-pprint-dispatch:                   set-pprint-dispatch. (line   6)
* set-syntax-from-char:                  set-syntax-from-char.
                                                              (line   6)
* setf:                                  setf; psetf.         (line   6)
* setq:                                  setq.                (line   6)
* seventh:                               first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* shadow:                                Shadowing.           (line   8)
* shadow <1>:                            Introduction to Classes.
                                                              (line  34)
* shadow <2>:                            shadow.              (line   6)
* shadowing symbol:                      Introduction to Packages.
                                                              (line 156)
* shadowing symbol <1>:                  Introduction to Packages.
                                                              (line 187)
* shadowing-import:                      shadowing-import.    (line   6)
* shared-initialize:                     shared-initialize (Standard Generic Function).
                                                              (line   6)
* Sharpsign (reader macro):              Sharpsign.           (line   6)
* Sharpsign (sharpsign reader macro):    Sharpsign.           (line 409)
* Sharpsign A (reader macro):            Sharpsign.           (line 321)
* Sharpsign Asterisk (reader macro):     Sharpsign.           (line 150)
* Sharpsign B (reader macro):            Sharpsign.           (line 223)
* Sharpsign Backslash (reader macro):    Sharpsign.           (line  78)
* Sharpsign C (reader macro):            Sharpsign.           (line 294)
* Sharpsign Colon (reader macro):        Sharpsign.           (line 195)
* Sharpsign Dot (reader macro):          Sharpsign.           (line 208)
* Sharpsign Equal-Sign (reader macro):   Sharpsign.           (line 397)
* Sharpsign Left-Parenthesis (reader macro): Sharpsign.       (line 113)
* Sharpsign Less-Than-Sign (reader macro): Sharpsign.         (line 557)
* Sharpsign Minus (reader macro):        Sharpsign.           (line 460)
* Sharpsign O (reader macro):            Sharpsign.           (line 233)
* Sharpsign P (reader macro):            Sharpsign.           (line 386)
* Sharpsign Plus (reader macro):         Sharpsign.           (line 437)
* Sharpsign R (reader macro):            Sharpsign.           (line 259)
* Sharpsign Right-Parenthesis:           Sharpsign.           (line 572)
* Sharpsign Right-Parenthesis <1>:       Re-Reading Abbreviated Expressions.
                                                              (line   6)
* Sharpsign S (reader macro):            Sharpsign.           (line 359)
* Sharpsign Sharpsign (reader macro):    Sharpsign.           (line 409)
* Sharpsign Sharpsign (reader macro) <1>: pprint-pop.         (line  39)
* Sharpsign Single-Quote (reader macro): Sharpsign.           (line 103)
* Sharpsign Vertical-Bar (reader macro): Sharpsign.           (line 471)
* Sharpsign Whitespace:                  Sharpsign.           (line 565)
* Sharpsign Whitespace <1>:              Re-Reading Abbreviated Expressions.
                                                              (line   6)
* Sharpsign X (reader macro):            Sharpsign.           (line 245)
* shiftf:                                shiftf.              (line   6)
* short-float:                           short-float; single-float; double-float; long-float.
                                                              (line   6)
* short-float-epsilon:                   short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* short-float-negative-epsilon:          short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* short-site-name:                       short-site-name; long-site-name.
                                                              (line   6)
* should signal:                         Error Terminology.   (line  40)
* signal:                                Error Terminology.   (line  29)
* signal <1>:                            Error Terminology.   (line  40)
* signal <2>:                            Error Terminology.   (line  50)
* signal <3>:                            Error Terminology.   (line 113)
* signal <4>:                            signal.              (line   6)
* signed-byte:                           signed-byte.         (line   6)
* signum:                                signum.              (line   6)
* similar:                               Literal Objects in Compiled Files.
                                                              (line  37)
* simple-array:                          simple-array.        (line   6)
* simple-base-string:                    simple-base-string.  (line   6)
* simple-bit-vector:                     Sharpsign.           (line 150)
* simple-bit-vector <1>:                 simple-bit-vector.   (line   6)
* simple-bit-vector-p:                   simple-bit-vector-p. (line   6)
* simple-condition:                      simple-condition.    (line   6)
* simple-condition-format-arguments:     simple-condition-format-control; simple-condition-format-arguments.
                                                              (line   6)
* simple-condition-format-control:       simple-condition-format-control; simple-condition-format-arguments.
                                                              (line   6)
* simple-error:                          simple-error.        (line   6)
* simple-string:                         simple-string.       (line   6)
* simple-string-p:                       simple-string-p.     (line   6)
* simple-type-error:                     simple-type-error.   (line   6)
* simple-vector:                         Sharpsign.           (line 113)
* simple-vector <1>:                     simple-vector.       (line   6)
* simple-vector-p:                       simple-vector-p.     (line   6)
* simple-warning:                        simple-warning.      (line   6)
* sin:                                   sin; cos; tan.       (line   6)
* single escape:                         Character Syntax Types.
                                                              (line 254)
* single-float:                          short-float; single-float; double-float; long-float.
                                                              (line   6)
* single-float-epsilon:                  short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* single-float-negative-epsilon:         short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                              (line   6)
* Single-Quote (reader macro):           Single-Quote.        (line   6)
* Single-Quote (sharpsign reader macro): Sharpsign.           (line 103)
* sinh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* sixth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* Slash (format directive):              FORMAT Pretty Printer Operations.
                                                              (line  95)
* sleep:                                 sleep.               (line   6)
* slot specifier:                        Defining Classes.    (line  15)
* slot-boundp:                           slot-boundp.         (line   6)
* slot-exists-p:                         slot-exists-p.       (line   6)
* slot-makunbound:                       slot-makunbound.     (line   6)
* slot-missing:                          slot-missing.        (line   6)
* slot-unbound:                          slot-unbound.        (line   6)
* slot-value:                            slot-value.          (line   6)
* software-type:                         software-type; software-version.
                                                              (line   6)
* software-version:                      software-type; software-version.
                                                              (line   6)
* some:                                  every; some; notevery; notany.
                                                              (line   6)
* sort:                                  sort; stable-sort.   (line   6)
* source code:                           Loading.             (line   7)
* source file:                           Loading.             (line   9)
* space:                                 optimize.            (line   9)
* special:                               Minimal Declaration Processing Requirements.
                                                              (line   7)
* special <1>:                           special.             (line   6)
* special-operator-p:                    special-operator-p.  (line   6)
* specialized lambda list:               Specialized Lambda Lists.
                                                              (line   6)
* speed:                                 optimize.            (line   9)
* sqrt:                                  sqrt; isqrt.         (line   6)
* stable-sort:                           sort; stable-sort.   (line   6)
* standard:                              Method Selection and Combination.
                                                              (line 119)
* standard <1>:                          Method Selection and Combination.
                                                              (line 234)
* standard character:                    Standard Characters. (line   8)
* standard readtable:                    Readtables.          (line  34)
* standard syntax:                       Character Syntax.    (line  10)
* standard-char:                         standard-char.       (line   6)
* standard-char-p:                       standard-char-p.     (line   6)
* standard-class:                        standard-class.      (line   6)
* standard-generic-function:             standard-generic-function.
                                                              (line   6)
* standard-method:                       standard-method.     (line   6)
* standard-object:                       standard-object.     (line   6)
* startup environment:                   Compiler Terminology.
                                                              (line  48)
* step:                                  step.                (line   6)
* storage-condition:                     storage-condition.   (line   6)
* store-value:                           store-value (Restart).
                                                              (line   6)
* store-value <1>:                       abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* store-value <2>:                       abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* stream:                                File System Concepts.
                                                              (line   9)
* stream <1>:                            Introduction to Streams.
                                                              (line   6)
* stream <2>:                            Introduction to Streams.
                                                              (line   8)
* stream <3>:                            Introduction to Streams.
                                                              (line   9)
* stream <4>:                            Introduction to Streams.
                                                              (line  33)
* stream <5>:                            Introduction to Streams.
                                                              (line  33)
* stream <6>:                            Introduction to Streams.
                                                              (line  57)
* stream <7>:                            stream.              (line   6)
* stream associated with a file:         Coercion of Streams to Pathnames.
                                                              (line   6)
* stream associated with a file <1>:     Coercion of Streams to Pathnames.
                                                              (line   7)
* stream variable:                       Stream Variables.    (line   6)
* stream-element-type:                   stream-element-type. (line   6)
* stream-error:                          stream-error.        (line   6)
* stream-error-stream:                   stream-error-stream. (line   6)
* stream-external-format:                stream-external-format.
                                                              (line   6)
* streamp:                               streamp.             (line   6)
* string:                                Double-Quote.        (line   6)
* string <1>:                            Specialized Arrays.  (line  57)
* string <2>:                            string (System Class).
                                                              (line   6)
* string <3>:                            string (Function).   (line   6)
* string-capitalize:                     string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* string-char:                           Removed Types.       (line   6)
* string-char-p:                         Removed Operators.   (line   7)
* string-downcase:                       string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* string-equal:                          string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-greaterp:                       string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-left-trim:                      string-trim; string-left-trim; string-right-trim.
                                                              (line   6)
* string-lessp:                          string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-not-equal:                      string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-not-greaterp:                   string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-not-lessp:                      string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string-right-trim:                     string-trim; string-left-trim; string-right-trim.
                                                              (line   6)
* string-stream:                         string-stream.       (line   6)
* string-trim:                           string-trim; string-left-trim; string-right-trim.
                                                              (line   6)
* string-upcase:                         string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                              (line   6)
* string/=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string<:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string<=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string=:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string>:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* string>=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                              (line   6)
* stringp:                               stringp.             (line   6)
* structure:                             Sharpsign.           (line 359)
* structure-class:                       structure-class.     (line   6)
* structure-object:                      structure-object.    (line   6)
* style-warning:                         style-warning.       (line   6)
* subclass:                              Introduction to Classes.
                                                              (line   4)
* sublis:                                sublis; nsublis.     (line   6)
* subseq:                                subseq.              (line   6)
* subsetp:                               subsetp.             (line   6)
* subst:                                 subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* subst-if:                              subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* subst-if-not:                          subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                              (line   6)
* substitute:                            substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* substitute-if:                         substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* substitute-if-not:                     substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                              (line   6)
* subtypep:                              subtypep.            (line   6)
* superclass:                            Introduction to Classes.
                                                              (line   4)
* svref:                                 svref.               (line   6)
* sxhash:                                sxhash.              (line   6)
* symbol:                                Sharpsign.           (line 195)
* symbol <1>:                            symbol.              (line   6)
* symbol macro:                          Compilation Semantics.
                                                              (line 150)
* symbol-function:                       symbol-function.     (line   6)
* symbol-macrolet:                       Compilation Semantics.
                                                              (line 153)
* symbol-macrolet <1>:                   symbol-macrolet.     (line   6)
* symbol-name:                           symbol-name.         (line   6)
* symbol-package:                        symbol-package.      (line   6)
* symbol-plist:                          symbol-plist.        (line   6)
* symbol-value:                          symbol-value.        (line   6)
* symbolp:                               symbolp.             (line   6)
* synonym-stream:                        synonym-stream.      (line   6)
* synonym-stream-symbol:                 synonym-stream-symbol.
                                                              (line   6)
* syntax type:                           Character Syntax Types.
                                                              (line  14)
* SYSTEM:                                Packages No Longer Required.
                                                              (line   6)
* t:                                     t (System Class).    (line   6)
* t <1>:                                 t (Constant Variable).
                                                              (line   6)
* t <2>:                                 case; ccase; ecase.  (line  20)
* t <3>:                                 typecase; ctypecase; etypecase.
                                                              (line  20)
* T (format directive):                  FORMAT Layout Control.
                                                              (line   9)
* tagbody:                               tagbody.             (line   6)
* tailp:                                 ldiff; tailp.        (line   6)
* tan:                                   sin; cos; tan.       (line   6)
* tanh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                              (line   6)
* tenth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* terminating:                           Character Syntax Types.
                                                              (line 208)
* terpri:                                terpri; fresh-line.  (line   6)
* the:                                   the.                 (line   6)
* third:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                              (line   6)
* throw:                                 throw.               (line   6)
* Tilde (format directive):              FORMAT Basic Output. (line  72)
* Tilde A (format directive):            FORMAT Printer Operations.
                                                              (line   9)
* Tilde Ampersand (format directive):    FORMAT Basic Output. (line  59)
* Tilde Asterisk (format directive):     FORMAT Control-Flow Operations.
                                                              (line   9)
* Tilde B (format directive):            FORMAT Radix Control.
                                                              (line  73)
* Tilde C (format directive):            FORMAT Basic Output. (line   9)
* Tilde Circumflex (format directive):   FORMAT Miscellaneous Pseudo-Operations.
                                                              (line  15)
* Tilde D (format directive):            FORMAT Radix Control.
                                                              (line  44)
* Tilde Dollarsign (format directive):   FORMAT Floating-Point Printers.
                                                              (line 199)
* Tilde E (format directive):            FORMAT Floating-Point Printers.
                                                              (line  82)
* Tilde F (format directive):            FORMAT Floating-Point Printers.
                                                              (line   9)
* Tilde G (format directive):            FORMAT Floating-Point Printers.
                                                              (line 171)
* Tilde Greater-Than-Sign (format directive): FORMAT Layout Control.
                                                              (line 115)
* Tilde I (format directive):            FORMAT Pretty Printer Operations.
                                                              (line  87)
* Tilde Left-Brace (format directive):   FORMAT Control-Flow Operations.
                                                              (line  89)
* Tilde Left-Bracket (format directive): FORMAT Control-Flow Operations.
                                                              (line  27)
* Tilde Left-Paren (format directive):   FORMAT Miscellaneous Operations.
                                                              (line   9)
* Tilde Less-Than-Sign (format directive): FORMAT Pretty Printer Operations.
                                                              (line  19)
* Tilde Less-Than-Sign (format directive) <1>: FORMAT Layout Control.
                                                              (line  47)
* Tilde Newline (format directive):      FORMAT Miscellaneous Pseudo-Operations.
                                                              (line  82)
* Tilde O (format directive):            FORMAT Radix Control.
                                                              (line  83)
* Tilde P (format directive):            FORMAT Miscellaneous Operations.
                                                              (line  50)
* Tilde Percent (format directive):      FORMAT Basic Output. (line  52)
* Tilde Question-Mark (format directive): FORMAT Control-Flow Operations.
                                                              (line 167)
* Tilde R (format directive):            FORMAT Radix Control.
                                                              (line   9)
* Tilde Right-Brace (format directive):  FORMAT Control-Flow Operations.
                                                              (line 161)
* Tilde Right-Bracket (format directive): FORMAT Control-Flow Operations.
                                                              (line  83)
* Tilde Right-Paren (format directive):  FORMAT Miscellaneous Operations.
                                                              (line  44)
* Tilde S (format directive):            FORMAT Printer Operations.
                                                              (line  32)
* Tilde Semicolon (format directive):    FORMAT Miscellaneous Pseudo-Operations.
                                                              (line   9)
* Tilde Slash (format directive):        FORMAT Pretty Printer Operations.
                                                              (line  95)
* Tilde T (format directive):            FORMAT Layout Control.
                                                              (line   9)
* Tilde Tilde (format directive):        FORMAT Basic Output. (line  72)
* Tilde Underscore (format directive):   FORMAT Pretty Printer Operations.
                                                              (line  11)
* Tilde Vertical-Bar (format directive): FORMAT Basic Output. (line  66)
* Tilde W (format directive):            FORMAT Printer Operations.
                                                              (line  42)
* Tilde X (format directive):            FORMAT Radix Control.
                                                              (line  93)
* time:                                  time (Macro).        (line   6)
* token:                                 Character Syntax Types.
                                                              (line  77)
* trace:                                 trace; untrace.      (line   6)
* translate-logical-pathname:            translate-logical-pathname.
                                                              (line   6)
* translate-pathname:                    translate-pathname.  (line   6)
* tree:                                  Conses as Trees.     (line   6)
* tree-equal:                            tree-equal.          (line   6)
* truename:                              Truenames.           (line  12)
* truename <1>:                          truename.            (line   6)
* truncate:                              floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                              (line   6)
* two-way-stream:                        two-way-stream.      (line   6)
* two-way-stream-input-stream:           two-way-stream-input-stream; two-way-stream-output-stream.
                                                              (line   6)
* two-way-stream-output-stream:          two-way-stream-input-stream; two-way-stream-output-stream.
                                                              (line   6)
* type:                                  type.                (line   6)
* type-error:                            type-error.          (line   6)
* type-error-datum:                      type-error-datum; type-error-expected-type.
                                                              (line   6)
* type-error-expected-type:              type-error-datum; type-error-expected-type.
                                                              (line   6)
* type-of:                               type-of.             (line   6)
* typecase:                              typecase; ctypecase; etypecase.
                                                              (line   6)
* typep:                                 typep.               (line   6)
* unbound-slot:                          unbound-slot.        (line   6)
* unbound-slot-instance:                 unbound-slot-instance.
                                                              (line   6)
* unbound-variable:                      unbound-variable.    (line   6)
* undefined consequences:                Error Terminology.   (line  98)
* undefined-function:                    undefined-function.  (line   6)
* Underscore (format directive):         FORMAT Pretty Printer Operations.
                                                              (line  11)
* unexport:                              unexport.            (line   6)
* unintern:                              unintern.            (line   6)
* union:                                 union; nunion.       (line   6)
* universal time:                        Time.                (line  90)
* unless:                                when; unless.        (line   6)
* unread-char:                           unread-char.         (line   6)
* unsafe:                                Error Terminology.   (line  21)
* unsafe call:                           Argument Mismatch Detection.
                                                              (line  58)
* unsigned-byte:                         unsigned-byte.       (line   6)
* unspecified consequences:              Error Terminology.   (line  87)
* unspecified values:                    Error Terminology.   (line 119)
* untrace:                               trace; untrace.      (line   6)
* unuse-package:                         unuse-package.       (line   6)
* unwind-protect:                        unwind-protect.      (line   6)
* update-instance-for-different-class:   update-instance-for-different-class.
                                                              (line   6)
* update-instance-for-redefined-class:   update-instance-for-redefined-class.
                                                              (line   6)
* upgraded array element type:           Specialized Arrays.  (line  32)
* upgraded-array-element-type:           upgraded-array-element-type.
                                                              (line   6)
* upgraded-complex-part-type:            upgraded-complex-part-type.
                                                              (line   6)
* upper-case-p:                          upper-case-p; lower-case-p; both-case-p.
                                                              (line   6)
* use-package:                           use-package.         (line   6)
* use-value:                             use-value (Restart). (line   6)
* use-value <1>:                         abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* use-value <2>:                         abort; continue; muffle-warning; store-value; use-value.
                                                              (line   6)
* USER:                                  Packages No Longer Required.
                                                              (line   6)
* user-homedir-pathname:                 user-homedir-pathname.
                                                              (line   6)
* values:                                values (Type Specifier).
                                                              (line   6)
* values <1>:                            values (Accessor).   (line   6)
* values-list:                           values-list.         (line   6)
* vector:                                Sharpsign.           (line 113)
* vector <1>:                            Array Elements.      (line  48)
* vector <2>:                            vector (System Class).
                                                              (line   6)
* vector <3>:                            vector (Function).   (line   6)
* vector-pop:                            vector-pop.          (line   6)
* vector-push:                           vector-push; vector-push-extend.
                                                              (line   6)
* vector-push-extend:                    vector-push; vector-push-extend.
                                                              (line   6)
* vectorp:                               vectorp.             (line   6)
* Vertical-Bar (format directive):       FORMAT Basic Output. (line  66)
* Vertical-Bar (sharpsign reader macro): Sharpsign.           (line 471)
* W (format directive):                  FORMAT Printer Operations.
                                                              (line  42)
* warn:                                  warn.                (line   6)
* warning:                               Error Terminology.   (line 159)
* warning <1>:                           warning.             (line   6)
* when:                                  when; unless.        (line   6)
* wild-pathname-p:                       wild-pathname-p.     (line   6)
* with-accessors:                        with-accessors.      (line   6)
* with-compilation-unit:                 with-compilation-unit.
                                                              (line   6)
* with-condition-restarts:               with-condition-restarts.
                                                              (line   6)
* with-hash-table-iterator:              with-hash-table-iterator.
                                                              (line   6)
* with-input-from-string:                with-input-from-string.
                                                              (line   6)
* with-open-file:                        with-open-file.      (line   6)
* with-open-stream:                      with-open-stream.    (line   6)
* with-output-to-string:                 with-output-to-string.
                                                              (line   6)
* with-package-iterator:                 with-package-iterator.
                                                              (line   6)
* with-simple-restart:                   with-simple-restart. (line   6)
* with-slots:                            with-slots.          (line   6)
* with-standard-io-syntax:               with-standard-io-syntax.
                                                              (line   6)
* write:                                 write; prin1; print; pprint; princ.
                                                              (line   6)
* write-byte:                            write-byte.          (line   6)
* write-char:                            write-char.          (line   6)
* write-line:                            write-string; write-line.
                                                              (line   6)
* write-sequence:                        write-sequence.      (line   6)
* write-string:                          write-string; write-line.
                                                              (line   6)
* write-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                              (line   6)
* X (format directive):                  FORMAT Radix Control.
                                                              (line  93)
* X (sharpsign reader macro):            Sharpsign.           (line 245)
* y-or-n-p:                              y-or-n-p; yes-or-no-p.
                                                              (line   6)
* yes-or-no-p:                           y-or-n-p; yes-or-no-p.
                                                              (line   6)
* zerop:                                 zerop.               (line   6)


File: ansicl,  Node: Symbol Index,  Next: List of Figures,  Prev: Index,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* (setf class-name):                     setf class-name.       (line 6)
* (setf documentation):                  documentation; setf documentation.
                                                                (line 6)
* *:                                     * (Function).          (line 6)
* * <1>:                                 *; **; ***.            (line 6)
* **:                                    *; **; ***.            (line 6)
* ***:                                   *; **; ***.            (line 6)
* *break-on-signals*:                    *break-on-signals*.    (line 6)
* *compile-file-pathname*:               *compile-file-pathname*; *compile-file-truename*.
                                                                (line 6)
* *compile-file-truename*:               *compile-file-pathname*; *compile-file-truename*.
                                                                (line 6)
* *compile-print*:                       *compile-print*; *compile-verbose*.
                                                                (line 6)
* *compile-verbose*:                     *compile-print*; *compile-verbose*.
                                                                (line 6)
* *debug-io*:                            *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* *debugger-hook*:                       *debugger-hook*.       (line 6)
* *default-pathname-defaults*:           *default-pathname-defaults*.
                                                                (line 6)
* *error-output*:                        *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* *features*:                            *features*.            (line 6)
* *gensym-counter*:                      *gensym-counter*.      (line 6)
* *load-pathname*:                       *load-pathname*; *load-truename*.
                                                                (line 6)
* *load-print*:                          *load-print*; *load-verbose*.
                                                                (line 6)
* *load-truename*:                       *load-pathname*; *load-truename*.
                                                                (line 6)
* *load-verbose*:                        *load-print*; *load-verbose*.
                                                                (line 6)
* *macroexpand-hook*:                    *macroexpand-hook*.    (line 6)
* *modules*:                             *modules*.             (line 6)
* *package*:                             *package*.             (line 6)
* *print-array*:                         *print-array*.         (line 6)
* *print-base*:                          *print-base*; *print-radix*.
                                                                (line 6)
* *print-case*:                          *print-case*.          (line 6)
* *print-circle*:                        *print-circle*.        (line 6)
* *print-escape*:                        *print-escape*.        (line 6)
* *print-gensym*:                        *print-gensym*.        (line 6)
* *print-length*:                        *print-level*; *print-length*.
                                                                (line 6)
* *print-level*:                         *print-level*; *print-length*.
                                                                (line 6)
* *print-lines*:                         *print-lines*.         (line 6)
* *print-miser-width*:                   *print-miser-width*.   (line 6)
* *print-pprint-dispatch*:               *print-pprint-dispatch*.
                                                                (line 6)
* *print-pretty*:                        *print-pretty*.        (line 6)
* *print-radix*:                         *print-base*; *print-radix*.
                                                                (line 6)
* *print-readably*:                      *print-readably*.      (line 6)
* *print-right-margin*:                  *print-right-margin*.  (line 6)
* *query-io*:                            *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* *random-state*:                        *random-state*.        (line 6)
* *read-base*:                           *read-base*.           (line 6)
* *read-default-float-format*:           *read-default-float-format*.
                                                                (line 6)
* *read-eval*:                           *read-eval*.           (line 6)
* *read-suppress*:                       *read-suppress*.       (line 6)
* *readtable*:                           *readtable*.           (line 6)
* *standard-input*:                      *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* *standard-output*:                     *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* *terminal-io*:                         *terminal-io*.         (line 6)
* *trace-output*:                        *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+.
                                                                (line 6)
* +:                                     + (Function).          (line 6)
* + <1>:                                 +; ++; +++.            (line 6)
* ++:                                    +; ++; +++.            (line 6)
* +++:                                   +; ++; +++.            (line 6)
* -:                                     - (Function).          (line 6)
* - <1>:                                 - (Variable).          (line 6)
* /:                                     / (Function).          (line 6)
* / <1>:                                 /; //; ///.            (line 6)
* //:                                    /; //; ///.            (line 6)
* ///:                                   /; //; ///.            (line 6)
* /=:                                    =; /=; <; >; <=; >=.   (line 6)
* 1+:                                    1+; 1-.                (line 6)
* 1-:                                    1+; 1-.                (line 6)
* <:                                     =; /=; <; >; <=; >=.   (line 6)
* <=:                                    =; /=; <; >; <=; >=.   (line 6)
* =:                                     =; /=; <; >; <=; >=.   (line 6)
* >:                                     =; /=; <; >; <=; >=.   (line 6)
* >=:                                    =; /=; <; >; <=; >=.   (line 6)
* abort:                                 abort (Restart).       (line 6)
* abort <1>:                             abort; continue; muffle-warning; store-value; use-value.
                                                                (line 6)
* abs:                                   abs.                   (line 6)
* acons:                                 acons.                 (line 6)
* acos:                                  asin; acos; atan.      (line 6)
* acosh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* add-method:                            add-method.            (line 6)
* adjoin:                                adjoin.                (line 6)
* adjust-array:                          adjust-array.          (line 6)
* adjustable-array-p:                    adjustable-array-p.    (line 6)
* allocate-instance:                     allocate-instance.     (line 6)
* alpha-char-p:                          alpha-char-p.          (line 6)
* alphanumericp:                         alphanumericp.         (line 6)
* and:                                   and (Type Specifier).  (line 6)
* and <1>:                               and (Macro).           (line 6)
* append:                                append.                (line 6)
* apply:                                 apply.                 (line 6)
* apropos:                               apropos; apropos-list. (line 6)
* apropos-list:                          apropos; apropos-list. (line 6)
* aref:                                  aref.                  (line 6)
* arithmetic-error:                      arithmetic-error.      (line 6)
* arithmetic-error-operands:             arithmetic-error-operands; arithmetic-error-operation.
                                                                (line 6)
* arithmetic-error-operation:            arithmetic-error-operands; arithmetic-error-operation.
                                                                (line 6)
* array:                                 array.                 (line 6)
* array-dimension:                       array-dimension.       (line 6)
* array-dimension-limit:                 array-dimension-limit. (line 6)
* array-dimensions:                      array-dimensions.      (line 6)
* array-displacement:                    array-displacement.    (line 6)
* array-element-type:                    array-element-type.    (line 6)
* array-has-fill-pointer-p:              array-has-fill-pointer-p.
                                                                (line 6)
* array-in-bounds-p:                     array-in-bounds-p.     (line 6)
* array-rank:                            array-rank.            (line 6)
* array-rank-limit:                      array-rank-limit.      (line 6)
* array-row-major-index:                 array-row-major-index. (line 6)
* array-total-size:                      array-total-size.      (line 6)
* array-total-size-limit:                array-total-size-limit.
                                                                (line 6)
* arrayp:                                arrayp.                (line 6)
* ash:                                   ash.                   (line 6)
* asin:                                  asin; acos; atan.      (line 6)
* asinh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* assert:                                assert.                (line 6)
* assoc:                                 assoc; assoc-if; assoc-if-not.
                                                                (line 6)
* assoc-if:                              assoc; assoc-if; assoc-if-not.
                                                                (line 6)
* assoc-if-not:                          assoc; assoc-if; assoc-if-not.
                                                                (line 6)
* atan:                                  asin; acos; atan.      (line 6)
* atanh:                                 sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* atom:                                  atom (Type).           (line 6)
* atom <1>:                              atom (Function).       (line 6)
* base-char:                             base-char.             (line 6)
* base-string:                           base-string.           (line 6)
* bignum:                                bignum.                (line 6)
* bit:                                   bit (Type).            (line 6)
* bit <1>:                               bit; sbit.             (line 6)
* bit-and:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-andc1:                             bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-andc2:                             bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-eqv:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-ior:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-nand:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-nor:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-not:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-orc1:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-orc2:                              bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* bit-vector:                            bit-vector.            (line 6)
* bit-vector-p:                          bit-vector-p.          (line 6)
* bit-xor:                               bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+.
                                                                (line 6)
* block:                                 block.                 (line 6)
* boole:                                 boole.                 (line 6)
* boole-1:                               boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-2:                               boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-and:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-andc1:                           boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-andc2:                           boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-c1:                              boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-c2:                              boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-clr:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-eqv:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-ior:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-nand:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-nor:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-orc1:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-orc2:                            boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-set:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boole-xor:                             boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+.
                                                                (line 6)
* boolean:                               boolean.               (line 6)
* both-case-p:                           upper-case-p; lower-case-p; both-case-p.
                                                                (line 6)
* boundp:                                boundp.                (line 6)
* break:                                 break.                 (line 6)
* broadcast-stream:                      broadcast-stream.      (line 6)
* broadcast-stream-streams:              broadcast-stream-streams.
                                                                (line 6)
* built-in-class:                        built-in-class.        (line 6)
* butlast:                               butlast; nbutlast.     (line 6)
* byte:                                  byte; byte-size; byte-position.
                                                                (line 6)
* byte-position:                         byte; byte-size; byte-position.
                                                                (line 6)
* byte-size:                             byte; byte-size; byte-position.
                                                                (line 6)
* caaaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caaadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caaar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caadar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caaddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caadr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caar:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cadaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cadadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cadar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caddar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cadddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* caddr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cadr:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* call-arguments-limit:                  call-arguments-limit.  (line 6)
* call-method:                           call-method; make-method.
                                                                (line 6)
* call-next-method:                      call-next-method.      (line 6)
* car:                                   car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* case:                                  case; ccase; ecase.    (line 6)
* catch:                                 catch.                 (line 6)
* ccase:                                 case; ccase; ecase.    (line 6)
* cdaaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdaadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdaar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdadar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdaddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdadr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdar:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cddaar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cddadr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cddar:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdddar:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cddddr:                                car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdddr:                                 car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cddr:                                  car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* cdr:                                   car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+.
                                                                (line 6)
* ceiling:                               floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* cell-error:                            cell-error.            (line 6)
* cell-error-name:                       cell-error-name.       (line 6)
* cerror:                                cerror.                (line 6)
* change-class:                          change-class.          (line 6)
* char:                                  char; schar.           (line 6)
* char-code:                             char-code.             (line 6)
* char-code-limit:                       char-code-limit.       (line 6)
* char-downcase:                         char-upcase; char-downcase.
                                                                (line 6)
* char-equal:                            char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-greaterp:                         char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-int:                              char-int.              (line 6)
* char-lessp:                            char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-name:                             char-name.             (line 6)
* char-not-equal:                        char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-not-greaterp:                     char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-not-lessp:                        char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char-upcase:                           char-upcase; char-downcase.
                                                                (line 6)
* char/=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char<:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char<=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char=:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char>:                                 char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* char>=:                                char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+.
                                                                (line 6)
* character:                             character (System Class).
                                                                (line 6)
* character <1>:                         character (Function).  (line 6)
* characterp:                            characterp.            (line 6)
* check-type:                            check-type.            (line 6)
* cis:                                   cis.                   (line 6)
* class:                                 class.                 (line 6)
* class-name:                            class-name.            (line 6)
* class-of:                              class-of.              (line 6)
* clear-input:                           clear-input.           (line 6)
* clear-output:                          finish-output; force-output; clear-output.
                                                                (line 6)
* close:                                 close.                 (line 6)
* clrhash:                               clrhash.               (line 6)
* code-char:                             code-char.             (line 6)
* coerce:                                coerce.                (line 6)
* compile:                               compile.               (line 6)
* compile-file:                          compile-file.          (line 6)
* compile-file-pathname:                 compile-file-pathname. (line 6)
* compiled-function:                     compiled-function.     (line 6)
* compiled-function-p:                   compiled-function-p.   (line 6)
* compiler-macro-function:               compiler-macro-function.
                                                                (line 6)
* complement:                            complement.            (line 6)
* complex:                               complex (System Class).
                                                                (line 6)
* complex <1>:                           complex (Function).    (line 6)
* complexp:                              complexp.              (line 6)
* compute-applicable-methods:            compute-applicable-methods.
                                                                (line 6)
* compute-restarts:                      compute-restarts.      (line 6)
* concatenate:                           concatenate.           (line 6)
* concatenated-stream:                   concatenated-stream.   (line 6)
* concatenated-stream-streams:           concatenated-stream-streams.
                                                                (line 6)
* cond:                                  cond.                  (line 6)
* condition:                             condition.             (line 6)
* conjugate:                             conjugate.             (line 6)
* cons:                                  cons (System Class).   (line 6)
* cons <1>:                              cons (Function).       (line 6)
* consp:                                 consp.                 (line 6)
* constantly:                            constantly.            (line 6)
* constantp:                             constantp.             (line 6)
* continue:                              continue (Restart).    (line 6)
* continue <1>:                          abort; continue; muffle-warning; store-value; use-value.
                                                                (line 6)
* control-error:                         control-error.         (line 6)
* copy-alist:                            copy-alist.            (line 6)
* copy-list:                             copy-list.             (line 6)
* copy-pprint-dispatch:                  copy-pprint-dispatch.  (line 6)
* copy-readtable:                        copy-readtable.        (line 6)
* copy-seq:                              copy-seq.              (line 6)
* copy-structure:                        copy-structure.        (line 6)
* copy-symbol:                           copy-symbol.           (line 6)
* copy-tree:                             copy-tree.             (line 6)
* cos:                                   sin; cos; tan.         (line 6)
* cosh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* count:                                 count; count-if; count-if-not.
                                                                (line 6)
* count-if:                              count; count-if; count-if-not.
                                                                (line 6)
* count-if-not:                          count; count-if; count-if-not.
                                                                (line 6)
* ctypecase:                             typecase; ctypecase; etypecase.
                                                                (line 6)
* decf:                                  incf; decf.            (line 6)
* declaim:                               declaim.               (line 6)
* declaration:                           declaration.           (line 6)
* declare:                               declare.               (line 6)
* decode-float:                          decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* decode-universal-time:                 decode-universal-time. (line 6)
* defclass:                              defclass.              (line 6)
* defconstant:                           defconstant.           (line 6)
* defgeneric:                            defgeneric.            (line 6)
* define-compiler-macro:                 define-compiler-macro. (line 6)
* define-condition:                      define-condition.      (line 6)
* define-method-combination:             define-method-combination.
                                                                (line 6)
* define-modify-macro:                   define-modify-macro.   (line 6)
* define-setf-expander:                  define-setf-expander.  (line 6)
* define-symbol-macro:                   define-symbol-macro.   (line 6)
* defmacro:                              defmacro.              (line 6)
* defmethod:                             defmethod.             (line 6)
* defpackage:                            defpackage.            (line 6)
* defparameter:                          defparameter; defvar.  (line 6)
* defsetf:                               defsetf.               (line 6)
* defstruct:                             defstruct.             (line 6)
* deftype:                               deftype.               (line 6)
* defun:                                 defun.                 (line 6)
* defvar:                                defparameter; defvar.  (line 6)
* delete:                                remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* delete-duplicates:                     remove-duplicates; delete-duplicates.
                                                                (line 6)
* delete-file:                           delete-file.           (line 6)
* delete-if:                             remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* delete-if-not:                         remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* delete-package:                        delete-package.        (line 6)
* denominator:                           numerator; denominator.
                                                                (line 6)
* deposit-field:                         deposit-field.         (line 6)
* describe:                              describe.              (line 6)
* describe-object:                       describe-object.       (line 6)
* destructuring-bind:                    destructuring-bind.    (line 6)
* digit-char:                            digit-char.            (line 6)
* digit-char-p:                          digit-char-p.          (line 6)
* directory:                             directory.             (line 6)
* directory-namestring:                  namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                                (line 6)
* disassemble:                           disassemble.           (line 6)
* division-by-zero:                      division-by-zero.      (line 6)
* do:                                    do; do*.               (line 6)
* do*:                                   do; do*.               (line 6)
* do-all-symbols:                        do-symbols; do-external-symbols; do-all-symbols.
                                                                (line 6)
* do-external-symbols:                   do-symbols; do-external-symbols; do-all-symbols.
                                                                (line 6)
* do-symbols:                            do-symbols; do-external-symbols; do-all-symbols.
                                                                (line 6)
* documentation:                         documentation; setf documentation.
                                                                (line 6)
* dolist:                                dolist.                (line 6)
* dotimes:                               dotimes.               (line 6)
* double-float:                          short-float; single-float; double-float; long-float.
                                                                (line 6)
* double-float-epsilon:                  short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* double-float-negative-epsilon:         short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* dpb:                                   dpb.                   (line 6)
* dribble:                               dribble.               (line 6)
* dynamic-extent:                        dynamic-extent.        (line 6)
* ecase:                                 case; ccase; ecase.    (line 6)
* echo-stream:                           echo-stream.           (line 6)
* echo-stream-input-stream:              echo-stream-input-stream; echo-stream-output-stream.
                                                                (line 6)
* echo-stream-output-stream:             echo-stream-input-stream; echo-stream-output-stream.
                                                                (line 6)
* ed:                                    ed.                    (line 6)
* eighth:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* elt:                                   elt.                   (line 6)
* encode-universal-time:                 encode-universal-time. (line 6)
* end-of-file:                           end-of-file.           (line 6)
* endp:                                  endp.                  (line 6)
* enough-namestring:                     namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                                (line 6)
* ensure-directories-exist:              ensure-directories-exist.
                                                                (line 6)
* ensure-generic-function:               ensure-generic-function.
                                                                (line 6)
* eq:                                    eq.                    (line 6)
* eql:                                   eql (Type Specifier).  (line 6)
* eql <1>:                               eql (Function).        (line 6)
* equal:                                 equal.                 (line 6)
* equalp:                                equalp.                (line 6)
* error:                                 error (Condition Type).
                                                                (line 6)
* error <1>:                             error (Function).      (line 6)
* etypecase:                             typecase; ctypecase; etypecase.
                                                                (line 6)
* eval:                                  eval.                  (line 6)
* eval-when:                             eval-when.             (line 6)
* evenp:                                 evenp; oddp.           (line 6)
* every:                                 every; some; notevery; notany.
                                                                (line 6)
* exp:                                   exp; expt.             (line 6)
* export:                                export.                (line 6)
* expt:                                  exp; expt.             (line 6)
* extended-char:                         extended-char.         (line 6)
* fboundp:                               fboundp.               (line 6)
* fceiling:                              floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* fdefinition:                           fdefinition.           (line 6)
* ffloor:                                floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* fifth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* file-author:                           file-author.           (line 6)
* file-error:                            file-error.            (line 6)
* file-error-pathname:                   file-error-pathname.   (line 6)
* file-length:                           file-length.           (line 6)
* file-namestring:                       namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                                (line 6)
* file-position:                         file-position.         (line 6)
* file-stream:                           file-stream.           (line 6)
* file-string-length:                    file-string-length.    (line 6)
* file-write-date:                       file-write-date.       (line 6)
* fill:                                  fill.                  (line 6)
* fill-pointer:                          fill-pointer.          (line 6)
* find:                                  find; find-if; find-if-not.
                                                                (line 6)
* find-all-symbols:                      find-all-symbols.      (line 6)
* find-class:                            find-class.            (line 6)
* find-if:                               find; find-if; find-if-not.
                                                                (line 6)
* find-if-not:                           find; find-if; find-if-not.
                                                                (line 6)
* find-method:                           find-method.           (line 6)
* find-package:                          find-package.          (line 6)
* find-restart:                          find-restart.          (line 6)
* find-symbol:                           find-symbol.           (line 6)
* finish-output:                         finish-output; force-output; clear-output.
                                                                (line 6)
* first:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* fixnum:                                fixnum.                (line 6)
* flet:                                  flet; labels; macrolet.
                                                                (line 6)
* float:                                 float (System Class).  (line 6)
* float <1>:                             float (Function).      (line 6)
* float-digits:                          decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* float-precision:                       decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* float-radix:                           decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* float-sign:                            decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* floating-point-inexact:                floating-point-inexact.
                                                                (line 6)
* floating-point-invalid-operation:      floating-point-invalid-operation.
                                                                (line 6)
* floating-point-overflow:               floating-point-overflow.
                                                                (line 6)
* floating-point-underflow:              floating-point-underflow.
                                                                (line 6)
* floatp:                                floatp.                (line 6)
* floor:                                 floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* fmakunbound:                           fmakunbound.           (line 6)
* force-output:                          finish-output; force-output; clear-output.
                                                                (line 6)
* format:                                format.                (line 6)
* formatter:                             formatter.             (line 6)
* fourth:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* fresh-line:                            terpri; fresh-line.    (line 6)
* fround:                                floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* ftruncate:                             floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* ftype:                                 ftype.                 (line 6)
* funcall:                               funcall.               (line 6)
* function:                              function (System Class).
                                                                (line 6)
* function <1>:                          function (Special Operator).
                                                                (line 6)
* function-keywords:                     function-keywords.     (line 6)
* function-lambda-expression:            function-lambda-expression.
                                                                (line 6)
* functionp:                             functionp.             (line 6)
* gcd:                                   gcd.                   (line 6)
* generic-function:                      generic-function.      (line 6)
* gensym:                                gensym.                (line 6)
* gentemp:                               gentemp.               (line 6)
* get:                                   get.                   (line 6)
* get-decoded-time:                      get-universal-time; get-decoded-time.
                                                                (line 6)
* get-dispatch-macro-character:          set-dispatch-macro-character; get-dispatch-macro-character.
                                                                (line 6)
* get-internal-real-time:                get-internal-real-time.
                                                                (line 6)
* get-internal-run-time:                 get-internal-run-time. (line 6)
* get-macro-character:                   set-macro-character; get-macro-character.
                                                                (line 6)
* get-output-stream-string:              get-output-stream-string.
                                                                (line 6)
* get-properties:                        get-properties.        (line 6)
* get-setf-expansion:                    get-setf-expansion.    (line 6)
* get-universal-time:                    get-universal-time; get-decoded-time.
                                                                (line 6)
* getf:                                  getf.                  (line 6)
* gethash:                               gethash.               (line 6)
* go:                                    go.                    (line 6)
* graphic-char-p:                        graphic-char-p.        (line 6)
* handler-bind:                          handler-bind.          (line 6)
* handler-case:                          handler-case.          (line 6)
* hash-table:                            hash-table.            (line 6)
* hash-table-count:                      hash-table-count.      (line 6)
* hash-table-p:                          hash-table-p.          (line 6)
* hash-table-rehash-size:                hash-table-rehash-size.
                                                                (line 6)
* hash-table-rehash-threshold:           hash-table-rehash-threshold.
                                                                (line 6)
* hash-table-size:                       hash-table-size.       (line 6)
* hash-table-test:                       hash-table-test.       (line 6)
* host-namestring:                       namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                                (line 6)
* identity:                              identity.              (line 6)
* if:                                    if.                    (line 6)
* ignorable:                             ignore; ignorable.     (line 6)
* ignore:                                ignore; ignorable.     (line 6)
* ignore-errors:                         ignore-errors.         (line 6)
* imagpart:                              realpart; imagpart.    (line 6)
* import:                                import.                (line 6)
* in-package:                            in-package.            (line 6)
* incf:                                  incf; decf.            (line 6)
* initialize-instance:                   initialize-instance (Standard Generic Function).
                                                                (line 6)
* inline:                                inline; notinline.     (line 6)
* input-stream-p:                        input-stream-p; output-stream-p.
                                                                (line 6)
* inspect:                               inspect.               (line 6)
* integer:                               integer.               (line 6)
* integer-decode-float:                  decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* integer-length:                        integer-length.        (line 6)
* integerp:                              integerp.              (line 6)
* interactive-stream-p:                  interactive-stream-p.  (line 6)
* intern:                                intern.                (line 6)
* internal-time-units-per-second:        internal-time-units-per-second.
                                                                (line 6)
* intersection:                          intersection; nintersection.
                                                                (line 6)
* invalid-method-error:                  invalid-method-error.  (line 6)
* invoke-debugger:                       invoke-debugger.       (line 6)
* invoke-restart:                        invoke-restart.        (line 6)
* invoke-restart-interactively:          invoke-restart-interactively.
                                                                (line 6)
* isqrt:                                 sqrt; isqrt.           (line 6)
* keyword:                               keyword.               (line 6)
* keywordp:                              keywordp.              (line 6)
* labels:                                flet; labels; macrolet.
                                                                (line 6)
* lambda:                                lambda (Symbol).       (line 6)
* lambda <1>:                            lambda (Macro).        (line 6)
* lambda-list-keywords:                  lambda-list-keywords.  (line 6)
* lambda-parameters-limit:               lambda-parameters-limit.
                                                                (line 6)
* last:                                  last.                  (line 6)
* lcm:                                   lcm.                   (line 6)
* ldb:                                   ldb.                   (line 6)
* ldb-test:                              ldb-test.              (line 6)
* ldiff:                                 ldiff; tailp.          (line 6)
* least-negative-double-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-long-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-normalized-double-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-normalized-long-float:  most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-normalized-short-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-normalized-single-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-short-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-negative-single-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-double-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-long-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-normalized-double-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-normalized-long-float:  most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-normalized-short-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-normalized-single-float: most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-short-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* least-positive-single-float:           most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* length:                                length.                (line 6)
* let:                                   let; let*.             (line 6)
* let*:                                  let; let*.             (line 6)
* lisp-implementation-type:              lisp-implementation-type; lisp-implementation-version.
                                                                (line 6)
* lisp-implementation-version:           lisp-implementation-type; lisp-implementation-version.
                                                                (line 6)
* list:                                  list (System Class).   (line 6)
* list <1>:                              list; list*.           (line 6)
* list*:                                 list; list*.           (line 6)
* list-all-packages:                     list-all-packages.     (line 6)
* list-length:                           list-length.           (line 6)
* listen:                                listen.                (line 6)
* listp:                                 listp.                 (line 6)
* load:                                  load.                  (line 6)
* load-logical-pathname-translations:    load-logical-pathname-translations.
                                                                (line 6)
* load-time-value:                       load-time-value.       (line 6)
* locally:                               locally.               (line 6)
* log:                                   log.                   (line 6)
* logand:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logandc1:                              logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logandc2:                              logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logbitp:                               logbitp.               (line 6)
* logcount:                              logcount.              (line 6)
* logeqv:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logical-pathname:                      logical-pathname (System Class).
                                                                (line 6)
* logical-pathname <1>:                  logical-pathname (Function).
                                                                (line 6)
* logical-pathname-translations:         logical-pathname-translations.
                                                                (line 6)
* logior:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* lognand:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* lognor:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* lognot:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logorc1:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logorc2:                               logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* logtest:                               logtest.               (line 6)
* logxor:                                logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+.
                                                                (line 6)
* long-float:                            short-float; single-float; double-float; long-float.
                                                                (line 6)
* long-float-epsilon:                    short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* long-float-negative-epsilon:           short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* long-site-name:                        short-site-name; long-site-name.
                                                                (line 6)
* loop:                                  loop.                  (line 6)
* loop-finish:                           loop-finish.           (line 6)
* lower-case-p:                          upper-case-p; lower-case-p; both-case-p.
                                                                (line 6)
* machine-instance:                      machine-instance.      (line 6)
* machine-type:                          machine-type.          (line 6)
* machine-version:                       machine-version.       (line 6)
* macro-function:                        macro-function.        (line 6)
* macroexpand:                           macroexpand; macroexpand-1.
                                                                (line 6)
* macroexpand-1:                         macroexpand; macroexpand-1.
                                                                (line 6)
* macrolet:                              flet; labels; macrolet.
                                                                (line 6)
* make-array:                            make-array.            (line 6)
* make-broadcast-stream:                 make-broadcast-stream. (line 6)
* make-concatenated-stream:              make-concatenated-stream.
                                                                (line 6)
* make-condition:                        make-condition.        (line 6)
* make-dispatch-macro-character:         make-dispatch-macro-character.
                                                                (line 6)
* make-echo-stream:                      make-echo-stream.      (line 6)
* make-hash-table:                       make-hash-table.       (line 6)
* make-instance:                         make-instance.         (line 6)
* make-instances-obsolete:               make-instances-obsolete.
                                                                (line 6)
* make-list:                             make-list.             (line 6)
* make-load-form:                        make-load-form.        (line 6)
* make-load-form-saving-slots:           make-load-form-saving-slots.
                                                                (line 6)
* make-method:                           call-method; make-method.
                                                                (line 6)
* make-package:                          make-package.          (line 6)
* make-pathname:                         make-pathname.         (line 6)
* make-random-state:                     make-random-state.     (line 6)
* make-sequence:                         make-sequence.         (line 6)
* make-string:                           make-string.           (line 6)
* make-string-input-stream:              make-string-input-stream.
                                                                (line 6)
* make-string-output-stream:             make-string-output-stream.
                                                                (line 6)
* make-symbol:                           make-symbol.           (line 6)
* make-synonym-stream:                   make-synonym-stream.   (line 6)
* make-two-way-stream:                   make-two-way-stream.   (line 6)
* makunbound:                            makunbound.            (line 6)
* map:                                   map.                   (line 6)
* map-into:                              map-into.              (line 6)
* mapc:                                  mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* mapcan:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* mapcar:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* mapcon:                                mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* maphash:                               maphash.               (line 6)
* mapl:                                  mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* maplist:                               mapc; mapcar; mapcan; mapl; maplist; mapcon.
                                                                (line 6)
* mask-field:                            mask-field.            (line 6)
* max:                                   max; min.              (line 6)
* member:                                member (Type Specifier).
                                                                (line 6)
* member <1>:                            member; member-if; member-if-not.
                                                                (line 6)
* member-if:                             member; member-if; member-if-not.
                                                                (line 6)
* member-if-not:                         member; member-if; member-if-not.
                                                                (line 6)
* merge:                                 merge.                 (line 6)
* merge-pathnames:                       merge-pathnames.       (line 6)
* method:                                method.                (line 6)
* method-combination:                    method-combination.    (line 6)
* method-combination-error:              method-combination-error.
                                                                (line 6)
* method-qualifiers:                     method-qualifiers.     (line 6)
* min:                                   max; min.              (line 6)
* minusp:                                minusp; plusp.         (line 6)
* mismatch:                              mismatch.              (line 6)
* mod:                                   mod (Type Specifier).  (line 6)
* mod <1>:                               mod; rem.              (line 6)
* most-negative-double-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-negative-fixnum:                  most-positive-fixnum; most-negative-fixnum.
                                                                (line 6)
* most-negative-long-float:              most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-negative-short-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-negative-single-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-positive-double-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-positive-fixnum:                  most-positive-fixnum; most-negative-fixnum.
                                                                (line 6)
* most-positive-long-float:              most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-positive-short-float:             most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* most-positive-single-float:            most-positive-short-float; least-positive-short-float; least-positive-n+.
                                                                (line 6)
* muffle-warning:                        muffle-warning (Restart).
                                                                (line 6)
* muffle-warning <1>:                    abort; continue; muffle-warning; store-value; use-value.
                                                                (line 6)
* multiple-value-bind:                   multiple-value-bind.   (line 6)
* multiple-value-call:                   multiple-value-call.   (line 6)
* multiple-value-list:                   multiple-value-list.   (line 6)
* multiple-value-prog1:                  multiple-value-prog1.  (line 6)
* multiple-value-setq:                   multiple-value-setq.   (line 6)
* multiple-values-limit:                 multiple-values-limit. (line 6)
* name-char:                             name-char.             (line 6)
* namestring:                            namestring; file-namestring; directory-namestring; host-namestring; eno+.
                                                                (line 6)
* nbutlast:                              butlast; nbutlast.     (line 6)
* nconc:                                 nconc.                 (line 6)
* next-method-p:                         next-method-p.         (line 6)
* nil:                                   nil (Type).            (line 6)
* nil <1>:                               nil (Constant Variable).
                                                                (line 6)
* nintersection:                         intersection; nintersection.
                                                                (line 6)
* ninth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* no-applicable-method:                  no-applicable-method.  (line 6)
* no-next-method:                        no-next-method.        (line 6)
* not:                                   not (Type Specifier).  (line 6)
* not <1>:                               not (Function).        (line 6)
* notany:                                every; some; notevery; notany.
                                                                (line 6)
* notevery:                              every; some; notevery; notany.
                                                                (line 6)
* notinline:                             inline; notinline.     (line 6)
* nreconc:                               revappend; nreconc.    (line 6)
* nreverse:                              reverse; nreverse.     (line 6)
* nset-difference:                       set-difference; nset-difference.
                                                                (line 6)
* nset-exclusive-or:                     set-exclusive-or; nset-exclusive-or.
                                                                (line 6)
* nstring-capitalize:                    string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* nstring-downcase:                      string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* nstring-upcase:                        string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* nsublis:                               sublis; nsublis.       (line 6)
* nsubst:                                subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* nsubst-if:                             subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* nsubst-if-not:                         subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* nsubstitute:                           substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* nsubstitute-if:                        substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* nsubstitute-if-not:                    substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* nth:                                   nth.                   (line 6)
* nth-value:                             nth-value.             (line 6)
* nthcdr:                                nthcdr.                (line 6)
* null:                                  null (System Class).   (line 6)
* null <1>:                              null (Function).       (line 6)
* number:                                number.                (line 6)
* numberp:                               numberp.               (line 6)
* numerator:                             numerator; denominator.
                                                                (line 6)
* nunion:                                union; nunion.         (line 6)
* oddp:                                  evenp; oddp.           (line 6)
* open:                                  open.                  (line 6)
* open-stream-p:                         open-stream-p.         (line 6)
* optimize:                              optimize.              (line 6)
* or:                                    or (Type Specifier).   (line 6)
* or <1>:                                or (Macro).            (line 6)
* output-stream-p:                       input-stream-p; output-stream-p.
                                                                (line 6)
* package:                               package.               (line 6)
* package-error:                         package-error.         (line 6)
* package-error-package:                 package-error-package. (line 6)
* package-name:                          package-name.          (line 6)
* package-nicknames:                     package-nicknames.     (line 6)
* package-shadowing-symbols:             package-shadowing-symbols.
                                                                (line 6)
* package-use-list:                      package-use-list.      (line 6)
* package-used-by-list:                  package-used-by-list.  (line 6)
* packagep:                              packagep.              (line 6)
* pairlis:                               pairlis.               (line 6)
* parse-error:                           parse-error.           (line 6)
* parse-integer:                         parse-integer.         (line 6)
* parse-namestring:                      parse-namestring.      (line 6)
* pathname:                              pathname (System Class).
                                                                (line 6)
* pathname <1>:                          pathname (Function).   (line 6)
* pathname-device:                       pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathname-directory:                    pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathname-host:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathname-match-p:                      pathname-match-p.      (line 6)
* pathname-name:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathname-type:                         pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathname-version:                      pathname-host; pathname-device; pathname-directory; pathname-name; path+.
                                                                (line 6)
* pathnamep:                             pathnamep.             (line 6)
* peek-char:                             peek-char.             (line 6)
* phase:                                 phase.                 (line 6)
* pi:                                    pi.                    (line 6)
* plusp:                                 minusp; plusp.         (line 6)
* pop:                                   pop.                   (line 6)
* position:                              position; position-if; position-if-not.
                                                                (line 6)
* position-if:                           position; position-if; position-if-not.
                                                                (line 6)
* position-if-not:                       position; position-if; position-if-not.
                                                                (line 6)
* pprint:                                write; prin1; print; pprint; princ.
                                                                (line 6)
* pprint-dispatch:                       pprint-dispatch.       (line 6)
* pprint-exit-if-list-exhausted:         pprint-exit-if-list-exhausted.
                                                                (line 6)
* pprint-fill:                           pprint-fill; pprint-linear; pprint-tabular.
                                                                (line 6)
* pprint-indent:                         pprint-indent.         (line 6)
* pprint-linear:                         pprint-fill; pprint-linear; pprint-tabular.
                                                                (line 6)
* pprint-logical-block:                  pprint-logical-block.  (line 6)
* pprint-newline:                        pprint-newline.        (line 6)
* pprint-pop:                            pprint-pop.            (line 6)
* pprint-tab:                            pprint-tab.            (line 6)
* pprint-tabular:                        pprint-fill; pprint-linear; pprint-tabular.
                                                                (line 6)
* prin1:                                 write; prin1; print; pprint; princ.
                                                                (line 6)
* prin1-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                                (line 6)
* princ:                                 write; prin1; print; pprint; princ.
                                                                (line 6)
* princ-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                                (line 6)
* print:                                 write; prin1; print; pprint; princ.
                                                                (line 6)
* print-not-readable:                    print-not-readable.    (line 6)
* print-not-readable-object:             print-not-readable-object.
                                                                (line 6)
* print-object:                          print-object.          (line 6)
* print-unreadable-object:               print-unreadable-object.
                                                                (line 6)
* probe-file:                            probe-file.            (line 6)
* proclaim:                              proclaim.              (line 6)
* prog:                                  prog; prog*.           (line 6)
* prog*:                                 prog; prog*.           (line 6)
* prog1:                                 prog1; prog2.          (line 6)
* prog2:                                 prog1; prog2.          (line 6)
* progn:                                 progn.                 (line 6)
* program-error:                         program-error.         (line 6)
* progv:                                 progv.                 (line 6)
* provide:                               provide; require.      (line 6)
* psetf:                                 setf; psetf.           (line 6)
* psetq:                                 psetq.                 (line 6)
* push:                                  push.                  (line 6)
* pushnew:                               pushnew.               (line 6)
* quote:                                 quote.                 (line 6)
* random:                                random.                (line 6)
* random-state:                          random-state.          (line 6)
* random-state-p:                        random-state-p.        (line 6)
* rassoc:                                rassoc; rassoc-if; rassoc-if-not.
                                                                (line 6)
* rassoc-if:                             rassoc; rassoc-if; rassoc-if-not.
                                                                (line 6)
* rassoc-if-not:                         rassoc; rassoc-if; rassoc-if-not.
                                                                (line 6)
* ratio:                                 ratio.                 (line 6)
* rational:                              rational (System Class).
                                                                (line 6)
* rational <1>:                          rational; rationalize. (line 6)
* rationalize:                           rational; rationalize. (line 6)
* rationalp:                             rationalp.             (line 6)
* read:                                  read; read-preserving-whitespace.
                                                                (line 6)
* read-byte:                             read-byte.             (line 6)
* read-char:                             read-char.             (line 6)
* read-char-no-hang:                     read-char-no-hang.     (line 6)
* read-delimited-list:                   read-delimited-list.   (line 6)
* read-from-string:                      read-from-string.      (line 6)
* read-line:                             read-line.             (line 6)
* read-preserving-whitespace:            read; read-preserving-whitespace.
                                                                (line 6)
* read-sequence:                         read-sequence.         (line 6)
* reader-error:                          reader-error.          (line 6)
* readtable:                             readtable.             (line 6)
* readtable-case:                        readtable-case.        (line 6)
* readtablep:                            readtablep.            (line 6)
* real:                                  real.                  (line 6)
* realp:                                 realp.                 (line 6)
* realpart:                              realpart; imagpart.    (line 6)
* reduce:                                reduce.                (line 6)
* reinitialize-instance:                 reinitialize-instance. (line 6)
* rem:                                   mod; rem.              (line 6)
* remf:                                  remf.                  (line 6)
* remhash:                               remhash.               (line 6)
* remove:                                remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* remove-duplicates:                     remove-duplicates; delete-duplicates.
                                                                (line 6)
* remove-if:                             remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* remove-if-not:                         remove; remove-if; remove-if-not; delete; delete-if; delete-if-not.
                                                                (line 6)
* remove-method:                         remove-method.         (line 6)
* remprop:                               remprop.               (line 6)
* rename-file:                           rename-file.           (line 6)
* rename-package:                        rename-package.        (line 6)
* replace:                               replace.               (line 6)
* require:                               provide; require.      (line 6)
* rest:                                  rest.                  (line 6)
* restart:                               restart.               (line 6)
* restart-bind:                          restart-bind.          (line 6)
* restart-case:                          restart-case.          (line 6)
* restart-name:                          restart-name.          (line 6)
* return:                                return.                (line 6)
* return-from:                           return-from.           (line 6)
* revappend:                             revappend; nreconc.    (line 6)
* reverse:                               reverse; nreverse.     (line 6)
* room:                                  room.                  (line 6)
* rotatef:                               rotatef.               (line 6)
* round:                                 floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* row-major-aref:                        row-major-aref.        (line 6)
* rplaca:                                rplaca; rplacd.        (line 6)
* rplacd:                                rplaca; rplacd.        (line 6)
* satisfies:                             satisfies.             (line 6)
* sbit:                                  bit; sbit.             (line 6)
* scale-float:                           decode-float; scale-float; float-radix; float-sign; float-digits; float+.
                                                                (line 6)
* schar:                                 char; schar.           (line 6)
* search:                                search.                (line 6)
* second:                                first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* sequence:                              sequence.              (line 6)
* serious-condition:                     serious-condition.     (line 6)
* set:                                   set.                   (line 6)
* set-difference:                        set-difference; nset-difference.
                                                                (line 6)
* set-dispatch-macro-character:          set-dispatch-macro-character; get-dispatch-macro-character.
                                                                (line 6)
* set-exclusive-or:                      set-exclusive-or; nset-exclusive-or.
                                                                (line 6)
* set-macro-character:                   set-macro-character; get-macro-character.
                                                                (line 6)
* set-pprint-dispatch:                   set-pprint-dispatch.   (line 6)
* set-syntax-from-char:                  set-syntax-from-char.  (line 6)
* setf:                                  setf; psetf.           (line 6)
* setq:                                  setq.                  (line 6)
* seventh:                               first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* shadow:                                shadow.                (line 6)
* shadowing-import:                      shadowing-import.      (line 6)
* shared-initialize:                     shared-initialize (Standard Generic Function).
                                                                (line 6)
* shiftf:                                shiftf.                (line 6)
* short-float:                           short-float; single-float; double-float; long-float.
                                                                (line 6)
* short-float-epsilon:                   short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* short-float-negative-epsilon:          short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* short-site-name:                       short-site-name; long-site-name.
                                                                (line 6)
* signal:                                signal.                (line 6)
* signed-byte:                           signed-byte.           (line 6)
* signum:                                signum.                (line 6)
* simple-array:                          simple-array.          (line 6)
* simple-base-string:                    simple-base-string.    (line 6)
* simple-bit-vector:                     simple-bit-vector.     (line 6)
* simple-bit-vector-p:                   simple-bit-vector-p.   (line 6)
* simple-condition:                      simple-condition.      (line 6)
* simple-condition-format-arguments:     simple-condition-format-control; simple-condition-format-arguments.
                                                                (line 6)
* simple-condition-format-control:       simple-condition-format-control; simple-condition-format-arguments.
                                                                (line 6)
* simple-error:                          simple-error.          (line 6)
* simple-string:                         simple-string.         (line 6)
* simple-string-p:                       simple-string-p.       (line 6)
* simple-type-error:                     simple-type-error.     (line 6)
* simple-vector:                         simple-vector.         (line 6)
* simple-vector-p:                       simple-vector-p.       (line 6)
* simple-warning:                        simple-warning.        (line 6)
* sin:                                   sin; cos; tan.         (line 6)
* single-float:                          short-float; single-float; double-float; long-float.
                                                                (line 6)
* single-float-epsilon:                  short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* single-float-negative-epsilon:         short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+.
                                                                (line 6)
* sinh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* sixth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* sleep:                                 sleep.                 (line 6)
* slot-boundp:                           slot-boundp.           (line 6)
* slot-exists-p:                         slot-exists-p.         (line 6)
* slot-makunbound:                       slot-makunbound.       (line 6)
* slot-missing:                          slot-missing.          (line 6)
* slot-unbound:                          slot-unbound.          (line 6)
* slot-value:                            slot-value.            (line 6)
* software-type:                         software-type; software-version.
                                                                (line 6)
* software-version:                      software-type; software-version.
                                                                (line 6)
* some:                                  every; some; notevery; notany.
                                                                (line 6)
* sort:                                  sort; stable-sort.     (line 6)
* special:                               special.               (line 6)
* special-operator-p:                    special-operator-p.    (line 6)
* sqrt:                                  sqrt; isqrt.           (line 6)
* stable-sort:                           sort; stable-sort.     (line 6)
* standard-char:                         standard-char.         (line 6)
* standard-char-p:                       standard-char-p.       (line 6)
* standard-class:                        standard-class.        (line 6)
* standard-generic-function:             standard-generic-function.
                                                                (line 6)
* standard-method:                       standard-method.       (line 6)
* standard-object:                       standard-object.       (line 6)
* step:                                  step.                  (line 6)
* storage-condition:                     storage-condition.     (line 6)
* store-value:                           store-value (Restart). (line 6)
* store-value <1>:                       abort; continue; muffle-warning; store-value; use-value.
                                                                (line 6)
* stream:                                stream.                (line 6)
* stream-element-type:                   stream-element-type.   (line 6)
* stream-error:                          stream-error.          (line 6)
* stream-error-stream:                   stream-error-stream.   (line 6)
* stream-external-format:                stream-external-format.
                                                                (line 6)
* streamp:                               streamp.               (line 6)
* string:                                string (System Class). (line 6)
* string <1>:                            string (Function).     (line 6)
* string-capitalize:                     string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* string-downcase:                       string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* string-equal:                          string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-greaterp:                       string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-left-trim:                      string-trim; string-left-trim; string-right-trim.
                                                                (line 6)
* string-lessp:                          string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-not-equal:                      string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-not-greaterp:                   string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-not-lessp:                      string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string-right-trim:                     string-trim; string-left-trim; string-right-trim.
                                                                (line 6)
* string-stream:                         string-stream.         (line 6)
* string-trim:                           string-trim; string-left-trim; string-right-trim.
                                                                (line 6)
* string-upcase:                         string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+.
                                                                (line 6)
* string/=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string<:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string<=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string=:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string>:                               string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* string>=:                              string=; string/=; string<; string>; string<=; string>=; string-equal; +.
                                                                (line 6)
* stringp:                               stringp.               (line 6)
* structure-class:                       structure-class.       (line 6)
* structure-object:                      structure-object.      (line 6)
* style-warning:                         style-warning.         (line 6)
* sublis:                                sublis; nsublis.       (line 6)
* subseq:                                subseq.                (line 6)
* subsetp:                               subsetp.               (line 6)
* subst:                                 subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* subst-if:                              subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* subst-if-not:                          subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not.
                                                                (line 6)
* substitute:                            substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* substitute-if:                         substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* substitute-if-not:                     substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+.
                                                                (line 6)
* subtypep:                              subtypep.              (line 6)
* svref:                                 svref.                 (line 6)
* sxhash:                                sxhash.                (line 6)
* symbol:                                symbol.                (line 6)
* symbol-function:                       symbol-function.       (line 6)
* symbol-macrolet:                       symbol-macrolet.       (line 6)
* symbol-name:                           symbol-name.           (line 6)
* symbol-package:                        symbol-package.        (line 6)
* symbol-plist:                          symbol-plist.          (line 6)
* symbol-value:                          symbol-value.          (line 6)
* symbolp:                               symbolp.               (line 6)
* synonym-stream:                        synonym-stream.        (line 6)
* synonym-stream-symbol:                 synonym-stream-symbol. (line 6)
* t:                                     t (System Class).      (line 6)
* t <1>:                                 t (Constant Variable). (line 6)
* tagbody:                               tagbody.               (line 6)
* tailp:                                 ldiff; tailp.          (line 6)
* tan:                                   sin; cos; tan.         (line 6)
* tanh:                                  sinh; cosh; tanh; asinh; acosh; atanh.
                                                                (line 6)
* tenth:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* terpri:                                terpri; fresh-line.    (line 6)
* the:                                   the.                   (line 6)
* third:                                 first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+.
                                                                (line 6)
* throw:                                 throw.                 (line 6)
* time:                                  time (Macro).          (line 6)
* trace:                                 trace; untrace.        (line 6)
* translate-logical-pathname:            translate-logical-pathname.
                                                                (line 6)
* translate-pathname:                    translate-pathname.    (line 6)
* tree-equal:                            tree-equal.            (line 6)
* truename:                              truename.              (line 6)
* truncate:                              floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround.
                                                                (line 6)
* two-way-stream:                        two-way-stream.        (line 6)
* two-way-stream-input-stream:           two-way-stream-input-stream; two-way-stream-output-stream.
                                                                (line 6)
* two-way-stream-output-stream:          two-way-stream-input-stream; two-way-stream-output-stream.
                                                                (line 6)
* type:                                  type.                  (line 6)
* type-error:                            type-error.            (line 6)
* type-error-datum:                      type-error-datum; type-error-expected-type.
                                                                (line 6)
* type-error-expected-type:              type-error-datum; type-error-expected-type.
                                                                (line 6)
* type-of:                               type-of.               (line 6)
* typecase:                              typecase; ctypecase; etypecase.
                                                                (line 6)
* typep:                                 typep.                 (line 6)
* unbound-slot:                          unbound-slot.          (line 6)
* unbound-slot-instance:                 unbound-slot-instance. (line 6)
* unbound-variable:                      unbound-variable.      (line 6)
* undefined-function:                    undefined-function.    (line 6)
* unexport:                              unexport.              (line 6)
* unintern:                              unintern.              (line 6)
* union:                                 union; nunion.         (line 6)
* unless:                                when; unless.          (line 6)
* unread-char:                           unread-char.           (line 6)
* unsigned-byte:                         unsigned-byte.         (line 6)
* untrace:                               trace; untrace.        (line 6)
* unuse-package:                         unuse-package.         (line 6)
* unwind-protect:                        unwind-protect.        (line 6)
* update-instance-for-different-class:   update-instance-for-different-class.
                                                                (line 6)
* update-instance-for-redefined-class:   update-instance-for-redefined-class.
                                                                (line 6)
* upgraded-array-element-type:           upgraded-array-element-type.
                                                                (line 6)
* upgraded-complex-part-type:            upgraded-complex-part-type.
                                                                (line 6)
* upper-case-p:                          upper-case-p; lower-case-p; both-case-p.
                                                                (line 6)
* use-package:                           use-package.           (line 6)
* use-value:                             use-value (Restart).   (line 6)
* use-value <1>:                         abort; continue; muffle-warning; store-value; use-value.
                                                                (line 6)
* user-homedir-pathname:                 user-homedir-pathname. (line 6)
* values:                                values (Type Specifier).
                                                                (line 6)
* values <1>:                            values (Accessor).     (line 6)
* values-list:                           values-list.           (line 6)
* vector:                                vector (System Class). (line 6)
* vector <1>:                            vector (Function).     (line 6)
* vector-pop:                            vector-pop.            (line 6)
* vector-push:                           vector-push; vector-push-extend.
                                                                (line 6)
* vector-push-extend:                    vector-push; vector-push-extend.
                                                                (line 6)
* vectorp:                               vectorp.               (line 6)
* warn:                                  warn.                  (line 6)
* warning:                               warning.               (line 6)
* when:                                  when; unless.          (line 6)
* wild-pathname-p:                       wild-pathname-p.       (line 6)
* with-accessors:                        with-accessors.        (line 6)
* with-compilation-unit:                 with-compilation-unit. (line 6)
* with-condition-restarts:               with-condition-restarts.
                                                                (line 6)
* with-hash-table-iterator:              with-hash-table-iterator.
                                                                (line 6)
* with-input-from-string:                with-input-from-string.
                                                                (line 6)
* with-open-file:                        with-open-file.        (line 6)
* with-open-stream:                      with-open-stream.      (line 6)
* with-output-to-string:                 with-output-to-string. (line 6)
* with-package-iterator:                 with-package-iterator. (line 6)
* with-simple-restart:                   with-simple-restart.   (line 6)
* with-slots:                            with-slots.            (line 6)
* with-standard-io-syntax:               with-standard-io-syntax.
                                                                (line 6)
* write:                                 write; prin1; print; pprint; princ.
                                                                (line 6)
* write-byte:                            write-byte.            (line 6)
* write-char:                            write-char.            (line 6)
* write-line:                            write-string; write-line.
                                                                (line 6)
* write-sequence:                        write-sequence.        (line 6)
* write-string:                          write-string; write-line.
                                                                (line 6)
* write-to-string:                       write-to-string; prin1-to-string; princ-to-string.
                                                                (line 6)
* y-or-n-p:                              y-or-n-p; yes-or-no-p. (line 6)
* yes-or-no-p:                           y-or-n-p; yes-or-no-p. (line 6)
* zerop:                                 zerop.                 (line 6)

